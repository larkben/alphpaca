Contract LoanFactory (
    admin: Address,
    loanTemplate: ByteVec,
    mut activeLoans: U256,
    mut rate: U256
) {
    // events
    event NewLoan(contract: ByteVec, tokenRequested: ByteVec, tokenAmount: U256, collateralToken: ByteVec, collateralAmount: U256, interest: U256, duration: U256, who: Address)
    event AcceptedLoan(contract: ByteVec, who: Address)
    event LoanRemoved(contract: ByteVec, who: Address)
    event LoanWithdraw(contract: ByteVec, forfeit: Bool, who: Address)

    enum LoanCodes {
        NotAdmin = 0
    }

    pub fn getRequiredTokens(contractId: ByteVec, withInterest: Bool) -> (ByteVec, U256) {
        let loan = Loan(contractId)

        let (token, amount) = loan.getTokenRequested()

        if (withInterest) {
            let interestTotal = loan.getInterest()

            return token, interestTotal
        }
        else {
            return token, amount
        }
    }

    // contract functions
    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn createLoan(tokenRequested: ByteVec, tokenAmount: U256, collateralToken: ByteVec, collateralAmount: U256, interest: U256, duration: U256) -> () {
        let caller = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Loan.encodeFields!(
            caller,
            nullContractAddress!(),
            tokenRequested,
            tokenAmount,
            // collateral
            collateralToken,
            collateralAmount,
            interest,
            rate,
            duration,
            0,
            false,
            selfAddress!()
        )

        let contractID = copyCreateContract!{caller -> ALPH: minimalContractDeposit!() + dustAmount!(), collateralToken: collateralAmount}(
            loanTemplate,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        activeLoans = activeLoans + 1

        // emit event
        emit NewLoan(contractID, tokenRequested, tokenAmount, collateralToken, collateralAmount, interest, duration, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn accept(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()

        loan.acceptLoan{caller -> token: amount}(caller)

        // emit event
        emit AcceptedLoan(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn cancel(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        loan.cancelLoan(caller)

        // emit event
        emit LoanRemoved(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn pay(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()
        let totalAmount = loan.getInterest()

        loan.payLoan{caller -> token: totalAmount}(caller)

        // emit event
        emit LoanWithdraw(contractId, false, caller)
    }
    
    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn forfeit(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        //let (token, amount) = loan.getTokenCollateral()

        loan.acceptForfeit()

        // emit event
        emit LoanWithdraw(contractId, true, caller)
    }

    // edit rate
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = true)
    pub fn editRate(newRate: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        rate = newRate

        // emit event
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false, assetsInContract = true)
    pub fn destroyLoanFactory() -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        destroySelf!(admin)

        // emit event
    }

    // withdraw fees
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false, assetsInContract = true)
    pub fn withdrawLoanFactoryFees(who: Address, token: ByteVec, amount: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        transferToken!(selfAddress!(), who, token, amount)

        // emit event
    }

    // upgrade
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateLoanFactoryCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateLoanFactoryFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrateWithFields!(newCode, immFields, mutFields)
    }

    // liquidate? ~ function
    
}

TxScript CreateLoan (
    loanFactory: LoanFactory,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    collateralToken: ByteVec,
    collateralAmount: U256,
    interest: U256,
    duration: U256
) {
    loanFactory.createLoan{callerAddress!() -> ALPH: minimalContractDeposit!() + dustAmount!(), collateralToken: collateralAmount}(
        tokenRequested,
        tokenAmount,
        collateralToken,
        collateralAmount,
        interest,
        duration
    )
}

TxScript AcceptLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, false)

    loanFactory.accept{callerAddress!() -> token: amount}(contract)
}

TxScript CancelLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.cancel(contract)
}

TxScript PayLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, true)

    loanFactory.pay{callerAddress!() -> token: amount}(contract)
}

TxScript ForfeitLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.forfeit(contract)
}

// admin

TxScript EditLoanRate (
    loanFactory: LoanFactory,
    newRate: U256
) {
    loanFactory.editRate(newRate)
}

TxScript WithdrawLoanFactoryFees (
    loanFactory: LoanFactory,
    who: Address,
    token: ByteVec,
    amount: U256
) {
    loanFactory.withdrawLoanFactoryFees(who, token, amount)
}

// upgrade

TxScript UpdateLoanFactoryCode (
    loanFactory: LoanFactory,
    newCode: ByteVec
) {
    loanFactory.updateLoanFactoryCode(newCode)
}

TxScript UpdateLoanFactoryFields (
    loanFactory: LoanFactory,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    loanFactory.updateLoanFactoryFields(newCode, immFields, mutFields)
}

TxScript DestroyLoanFactory (
    loanFactory: LoanFactory
) {
    loanFactory.destroyLoanFactory()
}
Contract Loan (
    creator: Address,
    mut loanee: Address,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    // collateral
    collateralToken: ByteVec,
    collateralAmount: U256,
    interest: U256,
    rate: U256,                 // 200 would be 2%
    duration: U256,
    mut startTime: U256,
    // active
    mut active: Bool,
    parentContract: Address
) {

    // helper functions
    pub fn getTokenRequested() -> (ByteVec, U256) {
        return tokenRequested, tokenAmount
    }

    pub fn getTokenCollateral() -> (ByteVec, U256) {
        return collateralToken, collateralAmount
    }

    pub fn isLoanComplete() -> (Bool) {
        assert!(active == true, 1)

        // confirm the loan has completed it's time
        assert!(blockTimeStamp!() > startTime + duration, 0)

        return true
    }

    pub fn getInterest() -> (U256) {
        if (interest > 0) {
            // Calculate elapsed time
            let elapsedTime = blockTimeStamp!() - startTime
    
            // Avoid integer truncation: multiply first, then divide
            let gain = (tokenAmount * interest * elapsedTime) / (31556926000 * 10000)
    
            // Return the original amount plus interest
            return tokenAmount + gain
        } else {
            return tokenAmount
        }
    }

    fn getCommission(total: U256) -> (U256) {
        if (rate > 0) {
            let comission = (total * rate) / 10000
            // return the original amount plus interest
            return comission 
        }
        else {
            return 0
        }
    }       

    // contract functions
    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = true)
    pub fn acceptLoan(acceptor: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == false, 4)

        // transfer tokens to person requesting them
        transferToken!(acceptor, creator, tokenRequested, tokenAmount)

        // assignment
        active = true
        startTime = blockTimeStamp!()
        loanee = acceptor
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn cancelLoan(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm loan is not running
        assert!(active == false, 1)

        destroySelf!(caller)
    }

    @using(checkExternalCaller = false, assetsInContract = true)
    pub fn forceCancel() -> () {
        checkCaller!(callerAddress!() == creator, 5)

        assert!(active == false, 1)

        destroySelf!(creator)
    }

    @using(checkExternalCaller = true, preapprovedAssets = true, assetsInContract = true)
    pub fn payLoan(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // payback the loan
        assert!(active == true, 2)

        // transfer back assets plus the interest
        let totalPayment = getInterest()

        let totalCommission = getCommission(totalPayment)

        // user pays back two seperate accounts (marketplace fees, and the person who loaned them the assets)
        transferToken!(caller, loanee, tokenRequested, totalPayment - totalCommission)

        transferToken!(caller, parentContract, tokenRequested, totalCommission)

        // destroy the contract
        destroySelf!(creator)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn acceptForfeit() -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == true, 3)
        assert!(startTime + duration < blockTimeStamp!(), 4)

        // is the loan a liquidation loan?
        assert!(canLiquidate == false, 6)

        let totalCommission = getCommission(collateralAmount)
        transferToken!(selfAddress!(), parentContract, collateralToken, totalCommission)

        // claim collateral
        destroySelf!(loanee)
    }

    // activate the liquidation process ~ under 150% collateral
    // ---------------------------------------------------------

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn addCollateral(collateralAmount: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contracts
        assert!(canLiquidate = true, 6)

        // confirm it's active
        assert!(active == true, 3)

    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn activateLiquidation(collateralLevel: U256, startingBid: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contracts
        assert!(canLiquidate = true, 6)

        // confirm it's active
        assert!(active == true, 3)

        // liquidation to true
        liquidation = true
        timeToEnd = blockTimeStamp!() + 3600000  // 1 hour to liquidate -> assets are just sent to loanee

        // set the highest bid
        highestBid = startingBid
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn bid(caller: Address, bidAmount: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contracts
        assert!(canLiquidate = true, 6)

        // confirm it's active
        assert!(active == true, 3)

        // newBid must be greater than current bid
        assert!(bidAmount > highestBid, 7)

        // check time on auction
        assert!(blockTimeStamp!() < timeToEnd, Loan.AuctionEnded)

        // assert topBidder cannot bid up
        assert!(callerAddress!() != auctions[token].topBidder, AuctionCodes.InvalidCaller)

        // return previous top bid if not origin
        if (highestBidder != nullContractAddress!()) {
            transferToken!(selfAddress!(), highestBidder, tokenRequested, highestBid)
        }

        topBidder = callerAddress!()
        highestBid = bidAmount

        // Then transfer tokens
        transferToken!(callerAddress!(), selfAddress!(), tokenRequested, bidAmount)

        // anti-sniping
        if ((timeToEnd - blockTimeStamp!()) < 150000) {
            timeToEnd = timeToEnd + 150000 // 5 minutes in milliseconds
        }

        emit BidAuction(callerAddress!(), asset, totalBid, interval, timeToEnd)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn redeem(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contracts
        assert!(canLiquidate = true, 6)

        // confirm it's active
        assert!(active == true, 3)

        // Ensure the auction has ended
        assert!(blockTimeStamp!() > timeToEnd, Loan.AuctionActive)

        // implement redemption mechanics
    }
}

TxScript ForceCancel (
    loan: Loan
) {
    loan.forceCancel()
}
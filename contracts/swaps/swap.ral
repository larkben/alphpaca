//////////////////////////////////////////
// Swap Contract - swap.ral             //
//////////////////////////////////////////
//                         ^___^        //
//   |--| |--| |--- |--|  |     \       //
//   |--| |--| |    |--|  |  O -\--,    //
//   |    |  | |--- |  |  \_____|--|    //
//                                      //
//   cuddly, cute, and fluffy as hell   //
//                                      //
//////////////////////////////////////////

Contract Swap (
    sell: U256,
    selltoken: ByteVec,
    buy: U256,
    buytoken: ByteVec,
    owner: Address
) {
    // Events
    event SwapComplete(type: U256, id: ByteVec) // Type 1
    event Cancel(type: U256, id: ByteVec)       // Type 2

    pub fn getSell() -> U256 {
        return sell
    }

    pub fn getSellToken() -> ByteVec {
        return selltoken
    }

    pub fn getBuy() -> U256 {
        return buy
    }

    pub fn getBuyToken() -> ByteVec {
        return buytoken
    }

    pub fn getSellBuyRatio() -> U256 {
        let ratioOne = getSell()
        let ratioTwo = getBuy()

        let ratio = ratioOne / ratioTwo
        return ratio
    }

    // Contract Functions
    // market buy iterates through all instances of contracts that satisfy lowest number first
    @using(preapprovedAssets = true, assetsInContract = true, updateFields = false, checkExternalCaller = false)
    pub fn confirmswap() -> () {

        let buyer = callerAddress!()

        transferToken!(buyer, selfAddress!(), getBuyToken(), getBuy())
        transferToken!(selfAddress!(), buyer, getSellToken(), getSell())

        emit SwapComplete(1, selfContractId!())
    }

    //@using(preapprovedAssets = true, assetsInContract = true, updateFields = false, checkExternalCaller = false)
    //pub fn partialswap() -> () {

    //}

    // mass cancel all order function?
    @using(preapprovedAssets = false, assetsInContract = true, updateFields = false, checkExternalCaller = false)
    pub fn cancelswap() -> () {

        // Call Destroy
        destroySelf!(owner)

        emit Cancel(2, selfContractId!())
        
    }
}
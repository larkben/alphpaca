//////////////////////////////////////////
// MCreation Contract - p2pmarket.ral   //
//////////////////////////////////////////
//                         ^___^        //
//   |--| |--| |--- |--|  |     \       //
//   |--| |--| |    |--|  |  O -\--,    //
//   |    |  | |--- |  |  \_____|--|    //
//                                      //
//   cuddly, cute, and fluffy as hell   //
//                                      //
//////////////////////////////////////////

Contract CreateMarket (
    owner: Address,
    // Swap Contract
    marketcontract: ByteVec,
    // Auction Contract
    // auctioncontract: ByteVec,
    // Loan Contract
    // loancontract: ByteVec,
    // Tokens (FEES)
    paca: ByteVec, 
    // Fees associated with contract creation
    mut pacafee: U256,
    mut alphfee: U256,
    // Variables used for fee collection
    mut ownedalph: U256,
    mut ownedpaca: U256
) {

    event FeeChange(feetype: U256, newfee: U256)

    // Error Codes
    enum ErrorCodes {
        InvalidCaller = 1
    }

    pub fn getPacaFee() -> U256 {
        return pacafee
    }

    pub fn getAlphFee() -> U256 {
        return alphfee
    }

    pub fn getPacaToken() -> ByteVec {
        return paca
    }

    @using(preapprovedAssets = false, assetsInContract = false, updateFields = true, checkExternalCaller = true)
    pub fn feepaca(amount: U256) -> () {

        checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)

        pacafee = amount

        emit FeeChange(2, pacafee)
    }

    @using(preapprovedAssets = false, assetsInContract = false, updateFields = true, checkExternalCaller = true)
    pub fn feealph(amount: U256) -> () {

        checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
        
        alphfee = amount

        emit FeeChange(1, alphfee)
    }

    @using(preapprovedAssets = false, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn collectfees() -> () {

        assert!(owner == callerAddress!(), ErrorCodes.InvalidCaller)
        
        transferTokenFromSelf!(owner, getPacaToken(), ownedpaca)

        transferTokenFromSelf!(owner, ALPH, ownedalph)

        ownedpaca = 0
        ownedalph = 0
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroymarketcreation() -> () {

        let caller = callerAddress!()

        checkCaller!(owner == caller, ErrorCodes.InvalidCaller)

        destroySelf!(owner)

        emit Destroy(owner)
    }

}
Contract LoanFactoryTest (
    admin: Address,
    loanTemplate: ByteVec,
    mut activeLoans: U256,
    mut rate: U256,
    oracle: TestOracle
) {
    // price mappings
    mapping [ByteVec, U256] tokenPrices
    mapping [ByteVec, ByteVec] tokenPairs

    // events
    event NewLoan(contract: ByteVec, tokenRequested: ByteVec, tokenAmount: U256, collateralToken: ByteVec, collateralAmount: U256, interest: U256, duration: U256, who: Address)
    event AcceptedLoan(contract: ByteVec, who: Address)
    event LoanRemoved(contract: ByteVec, who: Address)
    event LoanWithdraw(contract: ByteVec, forfeit: Bool, who: Address)

    enum LoanCodes {
        NotAdmin = 0
        TokenSizeTooSmall = 1
    }

    // oracle price updater
    fn updateTokenPrice(token: ByteVec) -> () {
        // maybe assert that the token is in the mapping

        tokenPrices[token] = oracle.getValue(tokenPairs[token]).value
    }

    // health / collateral value calculation
    fn determineCollateralRatio(
        tokenRequested: ByteVec,
        collateralToken: ByteVec, 
        threshhold: U256
    ) -> (U256, Bool) {
        let loan_value = oracle.getValue(tokenPairs[tokenRequested]).value

        let collateral_value = oracle.getValue(tokenPairs[collateralToken]).value

        if (loan_value == 0) {
            return 0, false
        }
        
        let collateral_ratio = (collateral_value * 100) / loan_value

        if (collateral_ratio < threshhold) {
            return collateral_ratio, true
        }

        else {
            return collateral_ratio, false
        }
    }

    pub fn getRequiredTokens(contractId: ByteVec, withInterest: Bool) -> (ByteVec, U256) {
        let loan = LoanTest(contractId)

        let (token, amount) = loan.getTokenRequested()

        if (withInterest) {
            let interestTotal = loan.getInterest()

            return token, interestTotal
        }
        else {
            return token, amount
        }
    }

    fn checkTokenAmount(priceIn: U256, commissionRateIn: U256) -> () {
        // Calculate the commission based on the rate
        let commission = (priceIn * commissionRateIn) / 10000

        // Ensure the token amount is sufficient
        assert!(priceIn > commission, LoanCodes.TokenSizeTooSmall)

        // Additional optional check for a minimum base token amount
        assert!(priceIn >= 10000, LoanCodes.TokenSizeTooSmall)
    }

    // contract functions
    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn createLoan(
        tokenRequested: ByteVec, 
        tokenAmount: U256, 
        collateralToken: ByteVec, 
        collateralAmount: U256, 
        interest: U256, 
        duration: U256, 
        canLiquidate: Bool
    ) -> () {
        let caller = callerAddress!()

        checkTokenAmount(tokenAmount, rate)

        let (encodeImmutableFields, encodeMutableFields) = LoanTest.encodeFields!(
            caller,
            nullContractAddress!(),
            tokenRequested,
            tokenAmount,
            // collateral
            collateralToken,
            collateralAmount,
            interest,
            rate,
            duration,
            0,
            false,
            selfAddress!(),
            canLiquidate,
            false,
            nullContractAddress!(),
            tokenAmount,
            0,
            oracle
        )

        let contractID = copyCreateContract!{caller -> ALPH: (minimalContractDeposit!() * 2), collateralToken: collateralAmount}(
            loanTemplate,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        activeLoans = activeLoans + 1

        // emit event
        emit NewLoan(contractID, tokenRequested, tokenAmount, collateralToken, collateralAmount, interest, duration, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn acceptMarket(
        tokenRequested: ByteVec, 
        tokenAmount: U256, 
        collateralToken: ByteVec, 
        collateralAmount: U256, 
        interest: U256, 
        duration: U256,
        loaneeMarket: ByteVec
    ) -> () {
        let caller = callerAddress!()
        let market = LoaneeMarket(loaneeMarket)

        checkTokenAmount(tokenAmount, rate)

        let (loanee, min, int, liquid) = market.getLoaneeDetails()
        let (token, amount) = market.getLoaneeTokenDetails()

        assert!(tokenRequested == token, 2)
        assert!(amount > tokenAmount, 3)
        assert!(interest >= int, 4)
        assert!(duration <= min, 5)

        let (encodeImmutableFields, encodeMutableFields) = LoanTest.encodeFields!(
            caller,
            loanee,
            tokenRequested,
            tokenAmount,
            // collateral
            collateralToken,
            collateralAmount,
            interest,
            rate,
            duration,
            // test oracle
            oracle.getTime(),
            true,
            selfAddress!(),
            liquid,
            false,
            nullContractAddress!(),
            tokenAmount,
            0,
            oracle
        )

        let contractID = copyCreateContract!{caller -> ALPH: (minimalContractDeposit!() * 2), collateralToken: collateralAmount}(
            loanTemplate,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        activeLoans = activeLoans + 1

        // emit event
        emit NewLoan(contractID, tokenRequested, tokenAmount, collateralToken, collateralAmount, interest, duration, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn accept(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()

        loan.acceptLoan{caller -> token: amount}(caller)

        // emit event
        emit AcceptedLoan(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn cancel(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        loan.cancelLoan(caller)

        // emit event
        emit LoanRemoved(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn pay(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()
        let totalAmount = loan.getInterest()

        loan.payLoan{caller -> token: totalAmount}(caller)

        // emit event
        emit LoanWithdraw(contractId, false, caller)
    }
    
    // liquidation
    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn forfeit(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        //let (token, amount) = loan.getTokenCollateral()

        loan.acceptForfeit()

        // emit event
        emit LoanWithdraw(contractId, true, caller)
    }

    // check liquidation
    @using(checkExternalCaller = false, updateFields = false)
    pub fn liquidation(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        updateTokenPrice(token)
        updateTokenPrice(collateral)

        // get liquidation threshold from loan (could be a cool feature)

        let (ratio, liquidate) = determineCollateralRatio(token, collateral, 150)

        assert!(liquidate == true, 8)

        loan.activateLiquidation(ratio)

        // ... emit liquidation
    }

    // auction functions
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn bid(contractId: ByteVec, bidAmount: U256) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        let (token, _) = loan.getTokenRequested()
        
        let highestBid = loan.getHighestBid()

        assert!(bidAmount > highestBid, 9)

        let timeEnd = loan.bid{caller -> token: highestBid}(caller, bidAmount)

        // ... emit liquidation
        // ... emit newPotential time end
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn redeem(contractId: ByteVec) -> () {
        let loan = LoanTest(contractId)

        let caller = callerAddress!()

        loan.redeem(caller)

        // ... emit redeem
    }

    // edit rate
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = true)
    pub fn editRate(newRate: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        rate = newRate
    }

    // ... complete this
    @using(checkExternalCaller = true, preapprovedAssets = true, updateFields = false)
    pub fn tokenMapping(token: ByteVec, add: Bool, pair: Bool, pairtoken: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        // create mapping
        if (pair) {
            if (add) {
                tokenPairs.insert!(callerAddress!(), token, pairtoken)
            }
            else {
                tokenPairs.remove!(callerAddress!(), token)
            }
        }
        else {
            if (add) {
                tokenPrices.insert!(callerAddress!(), token, 0) // token starts at zero
            }
            else {
                tokenPrices.remove!(callerAddress!(), token)
            }
        }
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false, assetsInContract = true)
    pub fn destroyLoanFactory() -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        destroySelf!(admin)

        // emit event
    }

    // withdraw fees
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false, assetsInContract = true)
    pub fn withdrawLoanFactoryFees(who: Address, token: ByteVec, amount: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        transferToken!(selfAddress!(), who, token, amount)

        // emit event
    }

    // upgrade
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateLoanFactoryCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateLoanFactoryFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrateWithFields!(newCode, immFields, mutFields)
    }

    // liquidate? ~ function
    
}

TxScript CreateLoanTest (
    loanFactory: LoanFactoryTest,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    collateralToken: ByteVec,
    collateralAmount: U256,
    interest: U256,
    duration: U256,
    canLiquidate: Bool
) {
    loanFactory.createLoan{callerAddress!() -> ALPH: (minimalContractDeposit!() * 2), collateralToken: collateralAmount}(
        tokenRequested,
        tokenAmount,
        collateralToken,
        collateralAmount,
        interest,
        duration,
        canLiquidate
    )
}

TxScript AcceptLoanTest (
    loanFactory: LoanFactoryTest,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, false)

    loanFactory.accept{callerAddress!() -> token: amount}(contract)
}

TxScript CancelLoanTest (
    loanFactory: LoanFactoryTest,
    contract: ByteVec
) {
    loanFactory.cancel(contract)
}

TxScript PayLoanTest (
    loanFactory: LoanFactoryTest,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, true)

    loanFactory.pay{callerAddress!() -> token: amount}(contract)
}

TxScript ForfeitLoanTest (
    loanFactory: LoanFactoryTest,
    contract: ByteVec
) {
    loanFactory.forfeit(contract)
}

// admin

TxScript EditLoanRateTest (
    loanFactory: LoanFactoryTest,
    newRate: U256
) {
    loanFactory.editRate(newRate)
}

TxScript WithdrawLoanFactoryFeesTest (
    loanFactory: LoanFactoryTest,
    who: Address,
    token: ByteVec,
    amount: U256
) {
    loanFactory.withdrawLoanFactoryFees(who, token, amount)
}

// upgrade / destroy

TxScript UpdateLoanFactoryCodeTest (
    loanFactory: LoanFactoryTest,
    newCode: ByteVec
) {
    loanFactory.updateLoanFactoryCode(newCode)
}

TxScript UpdateLoanFactoryFieldsTest (
    loanFactory: LoanFactoryTest,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    loanFactory.updateLoanFactoryFields(newCode, immFields, mutFields)
}

TxScript DestroyLoanFactoryTest (
    loanFactory: LoanFactoryTest
) {
    loanFactory.destroyLoanFactory()
}
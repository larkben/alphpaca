Contract LoanTest (
    creator: Address,
    mut loanee: Address,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    // collateral
    collateralToken: ByteVec,
    collateralAmount: U256,
    interest: U256,
    rate: U256,                 // 200 would be 2%
    duration: U256,
    mut startTime: U256,
    // active
    mut active: Bool,
    parentContract: Address
) {

    // helper functions
    pub fn getTokenRequested() -> (ByteVec, U256) {
        return tokenRequested, tokenAmount
    }

    pub fn getTokenCollateral() -> (ByteVec, U256) {
        return collateralToken, collateralAmount
    }

    pub fn isLoanComplete(time: U256) -> (Bool) {
        assert!(active == true, 1)

        // confirm the loan has completed it's time
        assert!(time > startTime + duration, 0)

        return true
    }

    pub fn getInterest(time: U256) -> (U256) {
        if (interest > 0) {
            // Calculate elapsed time
            let elapsedTime = time - startTime
    
            // Avoid integer truncation: multiply first, then divide
            let gain = (tokenAmount * interest * elapsedTime) / (31556926000 * 10000)
    
            // Return the original amount plus interest
            return tokenAmount + gain
        } else {
            return tokenAmount
        }
    }

    fn getCommission(total: U256) -> (U256) {
        if (rate > 0) {
            let comission = (total * rate) / 10000
            // return the original amount plus interest
            return comission 
        }
        else {
            return 0
        }
    }       

    // contract functions
    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = true)
    pub fn acceptLoan(acceptor: Address, time: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == false, 4)

        // transfer tokens to person requesting them
        transferToken!(acceptor, creator, tokenRequested, tokenAmount)

        // assignment
        active = true
        startTime = time
        loanee = acceptor
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn cancelLoan(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm loan is not running
        assert!(active == false, 1)

        destroySelf!(caller)
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn forceCancel() -> () {
        checkCaller!(callerAddress!() == creator, 5)

        assert!(active == false, 1)

        destroySelf!(creator)
    }

    @using(checkExternalCaller = true, preapprovedAssets = true, assetsInContract = true)
    pub fn payLoan(caller: Address, interestTime: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // payback the loan
        assert!(active == true, 2)

        // transfer back assets plus the interest
        let totalPayment = getInterest(interestTime)

        let totalCommission = getCommission(totalPayment)

        // user pays back two seperate accounts (marketplace fees, and the person who loaned them the assets)
        transferToken!(caller, loanee, tokenRequested, totalPayment - totalCommission)

        transferToken!(caller, parentContract, tokenRequested, totalCommission)

        // destroy the contract
        destroySelf!(creator)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true)
    pub fn acceptForfeit(time: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == true, 3)
        assert!(startTime + duration < time, 4)

        let totalCommission = getCommission(collateralAmount)
        transferToken!(selfAddress!(), parentContract, collateralToken, totalCommission)

        // claim collateral
        destroySelf!(loanee)
    }

    // debug functions
    // - edit active status
    // - edit startTime

    @using(checkExternalCaller = true, updateFields = true)
    pub fn editActiveStatus(newStatus: Bool) -> () {
        checkCaller!(callerAddress!() == creator, 5)

        active = newStatus
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn editStartTime(newTime: U256) -> () {
        checkCaller!(callerAddress!() == creator, 5)

        startTime = newTime
    }

}

TxScript ForceCancelTest (
    loan: LoanTest
) {
    loan.forceCancel()
}

// debug functions

TxScript EditActiveStatus (
    loan: LoanTest,
    newStatus: Bool
) {
    loan.editActiveStatus(newStatus)
}

TxScript EditStartTime (
    loan: LoanTest,
    newTime: U256
) {
    loan.editStartTime(newTime)
}
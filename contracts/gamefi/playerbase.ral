import "std/nft_collection_interface"

// the nft collection contract for players
Contract PlayerBase(
    collectionOwner: Address,
    mut collectionUri: ByteVec,
    gameContract: ByteVec,
    mut totalSupply: U256,    
    baseuri: ByteVec,
    playerContractId: ByteVec,
    oldcollection: ByteVec,
    // nft upgrades
    code: ByteVec,
    encodedImmutableFields: ByteVec,
    encodedMutableFields: ByteVec
) implements INFTCollection {
    event Mint(minter: Address, fromIndex: U256, contract: ByteVec)

    enum ErrorCodes {
        NFTNotFound = 0
        CollectionOwnerAllowedOnly = 1
        NFTNotPartOfCollection = 2
        NotValidNFT = 3
        InvalidMoveSlot = 4
    }

    // base uri
    pub fn getCollectionUri() -> ByteVec {
        return collectionUri
    }

    // total supply at runtime
    pub fn totalSupply() -> U256 {
        return totalSupply
    }

    // get the nft by index
    @using(checkExternalCaller = false)
    pub fn nftByIndex(index: U256) -> INFT {
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)

        return INFT(nftTokenId)
    }

    // validation ? ~ not being used
    @using(checkExternalCaller = false)
    pub fn validateNFT(nftId: ByteVec, index: U256) -> () {
      let expectedTokenContract = nftByIndex(index)
      assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

    // mint player
    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn mint(tokenSelected: ByteVec) -> () {

        burnToken!(callerAddress!(), tokenSelected, 1)

        // get the data associated with the NFT
        let (id, tempIndex) = INFT(tokenSelected).getCollectionIndex()

        assert!(id == oldcollection, ErrorCodes.NotValidNFT)

        // verify that the nft is legitmate
        INFTCollection(id).validateNFT(tokenSelected, tempIndex)

        // gets the index of the selected nft and then sets to the index of the new nft
        let nftUri = baseuri ++ u256ToString!(tempIndex)

        let c = #

        let (encodeImmutableFields, encodeMutableFields) = Player.encodeFields!(tempIndex, nftUri, selfContractId!(), gameContract, c, callerAddress!(), [1,1,1,1], [5,5,5,0], c, [c,c,c,c])

        let contractId = copyCreateSubContractWithToken!{callerAddress!() -> ALPH: minimalContractDeposit!()}(
            toByteVec!(tempIndex),
            playerContractId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            callerAddress!()
        )

        totalSupply = totalSupply + 1

        emit Mint(callerAddress!(), tempIndex, contractId)
    }

    // ANS functionality ~ need scripts
    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = false)
    pub fn updateNickname(paca: ByteVec, newNickName: ByteVec) -> () {

        Player(paca).editNick(newNickName)

    }

    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = false)
    pub fn updateLinkedAddress(paca: ByteVec, newAddress: Address) -> () {

        Player(paca).editLinkedAddress(newAddress)

    }

    // send asset function to specific paca

    // PACA Move Assignment ~ need scripts
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn assignPacaMove(paca: ByteVec, slot: U256, move: ByteVec) -> () {
        assert!(slot < 4, ErrorCodes.InvalidMoveSlot)

        Player(paca).assignMove{callerAddress!() -> move: 1}(callerAddress!(), slot, move)
    }

    @using(assetsInContract = enforced, checkExternalCaller = false, updateFields = false)
    pub fn unlinkMove(paca: ByteVec, slot: U256) -> () {
        assert!(slot < 4, ErrorCodes.InvalidMoveSlot)

        Player(paca).unAssignMove(callerAddress!(), slot)
    }

    // edit
    @using(checkExternalCaller = true, updateFields = true)
    pub fn editCollectionUri(newCollectionUri: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        collectionUri = newCollectionUri
    }

    // upgrades
    @using(checkExternalCaller = true)
    pub fn updatePlayerBase(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        migrate!(newCode)
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn updatePlayerBaseFields(newCode: ByteVec, newImmFieldsEncoded: ByteVec, newMutFieldsEncoded: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        migrateWithFields!(newCode, newImmFieldsEncoded, newMutFieldsEncoded)
    }

    // upgrade nfts
    @using(checkExternalCaller = false)
    pub fn updateALPHpacaCode(nft: ByteVec) -> () {
        assert!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        // get the data associated with the NFT
        let (id, tempIndex) = INFT(nft).getCollectionIndex()

        assert!(id == selfContractId!(), ErrorCodes.NotValidNFT)

        // verify that the nft is legitmate
        INFTCollection(id).validateNFT(nft, tempIndex)

        Player(nft).updatePlayerCode(code)
    }

    @using(checkExternalCaller = false)
    pub fn updateALPHpacaFields(nft: ByteVec) -> () {
        assert!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        // get the data associated with the NFT
        let (id, tempIndex) = INFT(nft).getCollectionIndex()

        assert!(id == selfContractId!(), ErrorCodes.NotValidNFT)

        // verify that the nft is legitmate
        INFTCollection(id).validateNFT(nft, tempIndex)

        Player(nft).updatePlayerFields(code, encodedImmutableFields, encodedMutableFields)
    }

}

// upgrade nft scripts
TxScript UpdateNFT(
    collection: PlayerBase,
    nft: ByteVec
) {
    collection.updateALPHpacaCode(nft)
}

TxScript UpdateNFTFields(
    collection: PlayerBase,
    nft: ByteVec
) {
    collection.updateALPHpacaFields(nft)
}

// upgrade collection
TxScript UpgradeCollectionCode(
    collection: PlayerBase,
    newCode: ByteVec
) {
    collection.updatePlayerBase(newCode)
}

TxScript UpgradeCollectionFields(
    collection: PlayerBase,
    newCode: ByteVec,
    newImmFieldsEncoded: ByteVec, 
    newMutFieldsEncoded: ByteVec
) {
    collection.updatePlayerBaseFields(newCode, newImmFieldsEncoded, newMutFieldsEncoded)
}

// nft collection functions
TxScript MintPlayer(
    collection: PlayerBase,
    tokenSelected: ByteVec
) {
    collection.mint{callerAddress!() -> tokenSelected: 1, ALPH: minimalContractDeposit!()}(tokenSelected)
}

TxScript EditCollectionUri(
    collection: PlayerBase,
    newCollectionUri: ByteVec
) {
    collection.editCollectionUri(newCollectionUri)
}

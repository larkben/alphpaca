import "std/nft_collection_interface"

Contract PlayerBase(
    collectionOwner: Address,
    mut collectionUri: ByteVec,
    mut totalSupply: U256,
    alphpacaId: ByteVec,
    parentContractId: ByteVec
) implements INFTCollection {
    enum ErrorCodes {
        NFTNotFound = 0
        CollectionOwnerAllowedOnly = 1
        NFTNotPartOfCollection = 2
        NotCalledFromGame = 3
    }

    pub fn getCollectionUri() -> ByteVec {
        return collectionUri
    }

    pub fn totalSupply() -> U256 {
        return totalSupply
    }

    @using(checkExternalCaller = false)
    pub fn nftByIndex(index: U256) -> INFT {
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)

        return INFT(nftTokenId)
    }

    @using(assetsInContract = true)
    pub fn withdraw(to: Address, amount: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        transferTokenFromSelf!(to, ALPH, amount)
    }

    @using(assetsInContract = true)
    pub fn withdrawNonNative(to: Address, token: ByteVec, amount: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        
        transferTokenFromSelf!(to, token, amount)
    }

    // validation ? ~ not being used
    @using(checkExternalCaller = false)
    pub fn validateNFT(nftId: ByteVec, nftIndex: U256) -> () {
      let expectedTokenContract = nftByIndex(nftIndex)
      assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

    // genehash
    @using(checkExternalCaller = true)
    pub fn editNFTHash(newHash: U256, subContract: ByteVec) -> () {
        checkCaller!(callerContractId!() == parentContractId, ErrorCodes.NotCalledFromGame)

        Player(subContract).editGeneHash(newHash)
    }

    // edit
    @using(checkExternalCaller = true)
    pub fn editCollectionUri(newCollectionUri: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        collectionUri = newCollectionUri
    }

    // upgrades
    @using(checkExternalCaller = true, updateFields = true)
    pub fn updatePlayerBase(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        migrate!(newCode)
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn updatePlayerBaseFields(newCode: ByteVec, newImmFieldsEncoded: ByteVec, newMutFieldsEncoded: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        migrateWithFields!(newCode, newImmFieldsEncoded, newMutFieldsEncoded)
    }
}
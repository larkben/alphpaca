struct DIAOracleValue {
    mut value: U256,
    mut timestamp: U256
}
  
Interface IDIAOracle {
    pub fn getValue(key: ByteVec) -> DIAOracleValue
}

// implement the supercharged nfts with this

Contract Battle (
    playerOne: Address,
    nftOne: ByteVec,
    // wager
    wagerToken: ByteVec,
    amount: U256,
    // opponent
    mut playerTwo: Address,
    mut nftTwo: ByteVec,
    // battle logic
    mut turn: U256,                 // 1 (one) , 2 (two) ~ binary
    oracle: IDIAOracle,             // random
    gamefi: ByteVec,
    timeSinceLastTurn: U256
) {
    enum BattleCodes {
        InvalidPlayer = 0
        BattleIsActive = 1
        NotYourTurn = 2
        NFTFainted = 3
    }

    // get functions
    pub fn getWagerToken() -> (ByteVec) {
        return wagerToken
    }

    pub fn getWagerAmount() -> (U256) {
        return amount
    }

    // random -> will need a non oracle compatible contract for proper unit testing
    fn random() -> (U256) {
        // add btc and alph; random if or else statement for further random certainity
        let seed = u256From32Byte!(
            blake2b!(toByteVec!(blockTarget!()) ++ 
            toByteVec!(blockTimeStamp!()) ++
            toByteVec!(oracle.getValue(b`BTC/USD`).value))
        )
        return addModN!(0, seed, 5)
    }

    // swap turns (False = P1, True = P2)
    fn whoTurn() -> (Address, ByteVec) {
        if (turn == 1) {
            return playerOne, nftOne
        }
        return playerTwo, nftTwo
    }

    // accept the battle when seen from the search
    @using(updateFields = true, checkExternalCaller = false)
    pub fn acceptBattle(nft: ByteVec, caller: Address) -> () {
        // assert that battle is not attempted to be joined after started
        assert!(playerTwo == playerOne, BattleCodes.BattleIsActive) 

        // assert that the nft is valid (valid health)
        let stats = GamifyProtocol(gamefi).getNFTstats(nft)

        assert!(stats.hp > 0, BattleCodes.NFTFainted)

        // fetch wager (if present)
        if (amount > 0) {
            transferToken!(caller, selfAddress!(), wagerToken, amount)
        }

        playerTwo = callerAddress!()
        nftTwo = nft
    }

    // attack
    // TODO: implement auto battle end if the other player knocks the other out
    @using(checkExternalCaller = true, updateFields = true)
    pub fn attack() -> () {
        assert!(playerTwo == nullContractAddress!(), ErrorCodes.NotYourTurn) 

        let condition = checkIfPacaFainted()

        assert!(condition == nullContractAddress!(), ErrorCodes.BattleIsDone)

        let allowed = whoTurn()

        checkCaller!(callerAddress!() == allowed, ErrorCodes.NotYourTurn)

        let _ = whichPaca(allowed, random())

        turn = !turn // switch turn
    }

    // end battle
    @using(checkExternalCaller = false, updateFields = false, assetsInContract = true)
    pub fn endbattle() -> () {
        let winner = checkIfPacaFainted()

        if (winner != nullContractAddress!()) {
            destroySelf!(winner) // gets the contract deposit
        }
    }

    // leave the battle
    // TODO: the player with the lowest HP is the loser
    @using(checkExternalCaller = true, updateFields = false, assetsInContract = true)
    pub fn leave() -> () {
        checkCaller!(callerAddress!() == whoTurn(), ErrorCodes.InvalidCaller)

        if (whoTurn() == playerOne) {
            destroySelf!(playerTwo)
        }
        else {
            destroySelf!(playerOne)
        }
    }

    // force cancel / cancel battle
    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn cancel() -> () {
        checkCaller!(playerTwo == playerOne, ErrorCodes.BattleNotDone)

        destroySelf!(playerOne)
    }
}

TxScript ForceContractCancel (
    pvp: Battle
) {
    pvp.cancel()
}
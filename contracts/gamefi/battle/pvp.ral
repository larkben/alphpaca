struct DIAOracleValue {
    mut value: U256,
    mut timestamp: U256
}
  
Interface IDIAOracle {
    pub fn getValue(key: ByteVec) -> DIAOracleValue
}

Contract Battle (
    playerOne: Address,
    pacaOne: ByteVec,
    mut oneHealth: U256,
    mut twoHealth: Address,
    mut pacaTwo: ByteVec,
    mut pacaTwoHealth: U256,
    mut turn: Bool,
    multiplier: U256,
    oracle: IDIAOracle
) {
    enum ErrorCodes {
        NotYourTurn = 1
        BattleNotDone = 2
        InvalidCaller = 3
        BattleIsDone = 4
    }

    // random
    fn random() -> (U256) {
        let seed = u256From32Byte!(
            blake2b!(toByteVec!(blockTarget!()) ++ 
            toByteVec!(blockTimeStamp!()) ++
            toByteVec!(multiplier) ++ 
            toByteVec!(oracle.getValue(b`BTC/USD`).value))
        )
        return addModN!(0, seed, 5)
    }

    // swap turns (False = P1, True = P2)
    fn whoTurn() -> Address {
        if (turn == false) {
            return playerOne
        }
        return playerTwo
    }

    // which NFT is taking damage
    @using(updateFields = true)
    fn whichNFT(player: Address, damage: U256) -> (ByteVec) {
        if (player == playerOne) {
            pacaTwoHealth = pacaTwoHealth - damage
            return pacaTwo
        }
        else {
            pacaOneHealth = pacaOneHealth - damage
            return pacaOne
        }
    }

    // check if NFT fainted
    fn checkIfNFTFainted() -> Address {
        if (pacaOneHealth == 0) {
            return playerTwo
        }
        else if (pacaTwoHealth == 0) {
            return playerOne
        }
        else {
            return nullContractAddress!()
        }
    }

    // accept the battle
    @using(updateFields = true, checkExternalCaller = false)
    pub fn acceptBattle(paca: ByteVec) -> () {
        assert!(playerTwo == playerOne, ErrorCodes.BattleIsDone) 

        playerTwo = callerAddress!()
        pacaTwo = paca
    }

    // attack
    // TODO: implement auto battle end if the other player knocks the other out
    @using(checkExternalCaller = true, updateFields = true)
    pub fn attack() -> () {
        assert!(playerTwo == nullContractAddress!(), ErrorCodes.NotYourTurn) 

        let condition = checkIfPacaFainted()

        assert!(condition == nullContractAddress!(), ErrorCodes.BattleIsDone)

        let allowed = whoTurn()

        checkCaller!(callerAddress!() == allowed, ErrorCodes.NotYourTurn)

        let _ = whichPaca(allowed, random())

        turn = !turn // switch turn
    }

    // end battle
    @using(checkExternalCaller = false, updateFields = false, assetsInContract = true)
    pub fn endbattle() -> () {
        let winner = checkIfPacaFainted()

        if (winner != nullContractAddress!()) {
            destroySelf!(winner) // gets the contract deposit
        }
    }

    // leave the battle
    // TODO: the player with the lowest HP is the loser
    @using(checkExternalCaller = true, updateFields = false, assetsInContract = true)
    pub fn leave() -> () {
        checkCaller!(callerAddress!() == whoTurn(), ErrorCodes.InvalidCaller)

        if (whoTurn() == playerOne) {
            destroySelf!(playerTwo)
        }
        else {
            destroySelf!(playerOne)
        }
    }

    // force cancel / cancel battle
    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn cancel() -> () {
        checkCaller!(playerTwo == playerOne, ErrorCodes.BattleNotDone)

        destroySelf!(playerOne)
    }
}

TxScript ForceContractCancel (
    pvp: Battle
) {
    pvp.cancel()
}
struct DIAOracleValue {
    mut value: U256,
    mut timestamp: U256
}

Interface IDIAOracle {
    pub fn getValue(key: ByteVec) -> DIAOracleValue
}

Abstract Contract BattleTools (
    oracle: IDIAOracle      // oracle integration
) {

    @using(checkExternalCaller = false)
    pub fn random() -> (U256) {

        // uses the BTC value / timestamp as entrophy for random
        let seed = u256From32Byte!(blake2b!(
            toByteVec!(blockTarget!()) ++ 
            toByteVec!(blockTimeStamp!()) ++ 
            toByteVec!(oracle.getValue(b`BTC/USD`).value) ++ 
            toByteVec!(oracle.getValue(b`BTC/USD`).timestamp)
        ))

        return addModN!(0, seed, 100) // range of 0 - 100
    }

    // base power, attack stat, defense stat (opponent)
    pub fn damageFormula(level: U256, bp: U256, as: U256, ds: U256) -> U256 {
        let damage = (((level * 2) / 1) * ((bp / as) / ds ))
        return damage
    }

    // xp reward for winning
    pub fn xpReward(level: U256) -> U256 {
        let exp = ((level * 3) * 2)
        return exp
    }
}
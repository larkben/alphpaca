// possibly add inventory
struct PlayerData {
    // nft
    nft: ByteVec,
    mut xp: U256,
    // stats
    mut hp: U256,
    mut atk: U256,
    mut def: U256,
    // stats special
    mut speed: U256,
    // hp / atk / def / spd
    mut levels: [U256; 4],
    mut cooldown: U256
}

Contract GamifyProtocol (
    admin: Address,
    mut supercharged: U256,
    pacaToken: ByteVec,
    mut pacaAmount: U256,
    xpRate: U256             // 1 for 10 (1 $PACA = 10 XP)
) {
    // mapping
    mapping [ByteVec, PlayerData] supernfts
    mapping [ByteVec, Bool] collections         // key (collectionId, true/false)
    mapping [Address, Bool] approved

    // events
    event Supercharge(who: Address, nft: ByteVec, time: U256)
    event Update(who: Address, nft: ByteVec)

    enum GamifyCodes {
        AlreadySupercharged = 0
        NotAdmin = 1
        NotSupercharged = 2
        NotApprovedContract = 3
        NotEnoughXp = 4
        NotApprovedNFT = 5
    }

    // public functions to get values and return
    pub fn getNFTstats(nft: ByteVec) -> PlayerData {
        assert!(supernfts.contains!(nft) == true, GamifyCodes.NotSupercharged)

        let data = supernfts[nft]

        return data
    }
    
    pub fn isSupercharged(nft: ByteVec) -> Bool {
        return supernfts.contains!(nft)
    }

    // supercharge the nfts; create mapping
    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn supercharge(nft: ByteVec) -> () {
        // verify mapping does not exist
        assert!(supernfts.contains!(nft) == false, GamifyCodes.AlreadySupercharged)

        // collection validation
        // get the data associated with the NFT
        let (id, _) = INFT(nft).getCollectionIndex()

        assert!(collections.contains!(id) == true, GamifyCodes.NotApprovedNFT)

        let caller = callerAddress!()
        let time = blockTimeStamp!()

        let t = [1,1,1,1]

        // player data
        let s = PlayerData { 
            nft: nft,
            xp: 0,
            // stats
            hp: 20,
            atk: 7,
            def: 5,
            // stats special
            speed: 1,
            // levels
            levels: t,
            cooldown: 0
        }

        // insert mapping
        supernfts.insert!(caller, nft, s)

        // update the count
        supercharged = supercharged + 1

        // log event
        emit Supercharge(caller, nft, time)
    }

    // these need to be built out
    @using(checkExternalCaller = false, updateFields = false)
    pub fn updateLevel(nft: ByteVec, index: U256) -> () {
        assert!(isSupercharged(nft) == true, GamifyCodes.NotSupercharged)

        let currentLevel = supernfts[nft].levels[index]
        let currentXp = supernfts[nft].xp

        // required xp has been obtained
        assert!(currentXp > (currentLevel * 100), GamifyCodes.NotEnoughXp)

        // upgrade it
        supernfts[nft].levels[index] = supernfts[nft].levels[index] + 1
        supernfts[nft].xp = supernfts[nft].xp - (currentLevel * 100)
    }

    @using(checkExternalCaller = false, updateFields = true, preapprovedAssets = true)
    pub fn rest(nft: ByteVec, quickRest: Bool) -> () {
        assert!(isSupercharged(nft) == true, GamifyCodes.NotSupercharged)

        if (quickRest) {
            // request payment for XP
            transferToken!(callerAddress!(), selfAddress!(), pacaToken, 20) // 20 paca fee
            pacaAmount = pacaAmount + 20

            // each xp or 1 xp = 10 xp after ratio adjustment -> apply xp
            supernfts[nft].hp = supernfts[nft].levels[0] * 25
        }

        else {
            checkCaller!(approved.contains!(callerAddress!()) == true, GamifyCodes.NotApprovedContract)

            assert!(approved[callerAddress!()] == true, GamifyCodes.NotApprovedContract)

            supernfts[nft].hp = supernfts[nft].levels[0] * 25
            
            supernfts[nft].cooldown = blockTimeStamp!() + 3600000 // 1 hour cooldown on health
        }

        // emit the event
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn removeHealth(nft: ByteVec, damage: U256) -> (U256) {   // returns that the player had enough health to remove / health remaining
        assert!(isSupercharged(nft) == true, GamifyCodes.NotSupercharged)

        if ((damage - supernfts[nft].def) > supernfts[nft].hp) {
            supernfts[nft].hp = 0

            return 0
        }

        supernfts[nft].hp = supernfts[nft].hp - (damage - supernfts[nft].def)

        let remaining = supernfts[nft].hp

        return remaining
    }

    @using(checkExternalCaller = false, updateFields = true, preapprovedAssets = true)
    pub fn addXp(nft: ByteVec, xp: U256, paidXp: Bool) -> () {
        assert!(isSupercharged(nft) == true, GamifyCodes.NotSupercharged)

        if (paidXp) {
            // request payment for XP
            transferToken!(callerAddress!(), selfAddress!(), pacaToken, xp * xpRate)

            // each xp or 1 xp = 10 xp after ratio adjustment -> apply xp
            supernfts[nft].xp = supernfts[nft].xp + (xp * 10)
            pacaAmount = pacaAmount + (xp * xpRate)
        }

        else {
            checkCaller!(approved.contains!(callerAddress!()) == true, GamifyCodes.NotApprovedContract)

            assert!(approved[callerAddress!()] == true, GamifyCodes.NotApprovedContract)

            supernfts[nft].xp = supernfts[nft].xp + (xp * 10)
        }

        // emit the event
    }

    @using(checkExternalCaller = true, updateFields = false, preapprovedAssets = true)
    pub fn editValidContract(contract: Address, remove: Bool) -> (Bool) {   // returns whether contract was removed or added
        checkCaller!(admin == callerAddress!(), GamifyCodes.NotAdmin)

        if (!remove) {
            approved.insert!(callerAddress!(), contract, true)

            return false
        }

        approved.remove!(callerAddress!(), contract)

        return true
    }

    // reward PACA function
    @using(checkExternalCaller = true, updateFields = false, assetsInContract = true)
    pub fn rewardPaca(reward: U256, reciever: Address) -> () {
        checkCaller!(approved.contains!(callerAddress!()) == true, GamifyCodes.NotApprovedContract)

        assert!(approved[callerAddress!()] == true, GamifyCodes.NotApprovedContract)

        transferToken!(selfAddress!(), reciever, pacaToken, reward)
    }

    // update contract scripts (code and fields)
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateGamifyCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, GamifyCodes.NotAdmin)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateGamifyFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, GamifyCodes.NotAdmin)

        migrateWithFields!(newCode, immFields, mutFields)
    }
}
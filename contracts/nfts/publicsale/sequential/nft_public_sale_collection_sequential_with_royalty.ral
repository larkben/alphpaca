import "std/nft_collection_with_royalty_interface"

// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting, users can mint the arts
// in the collection sequentially by paying the mint price.
Contract NFTPublicSaleCollectionSequentialWithRoyalty(
    nftMutableTemplateId: ByteVec,
    mut collectionUri: ByteVec,
    nftBaseUri: ByteVec,
    mut collectionOwner: Address,
    maxSupply: U256,
    mut mintPrice: U256,
    mut mintToken: ByteVec,
    mut maxBatchMintSize: U256,
    mut royaltyRate: U256, // basis point. e.g. 2.5% == 250 basis point
    mut totalSupply: U256,
    mut ownerOnly: Bool
) extends NFTPublicSaleCollectionSequentialBase(nftMutableTemplateId, collectionUri, nftBaseUri, collectionOwner, maxSupply, mintPrice, mintToken, maxBatchMintSize, totalSupply, ownerOnly)
    implements INFTCollectionWithRoyalty {

    enum ErrorCodes {
        RoyaltyRateTooHigh = 0
        TokenMustMatchMintToken = 1
    }

    pub fn getCollectionOwner() -> Address {
        return collectionOwner
    }

    pub fn getMintToken() -> ByteVec {
        return mintToken
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editRoyaltyRate(newRate: U256) -> () {
        assert!(newRate <= 5000, ErrorCodes.RoyaltyRateTooHigh)
        checkCaller!(collectionOwner == callerAddress!(), ErrorCodes.CollectionOwnerAllowedOnly)
        royaltyRate = newRate
    }

    pub fn royaltyAmount(@unused tokenId: ByteVec, salePrice: U256) -> (U256) {
        return salePrice * royaltyRate / 10000
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false)
    pub fn payRoyalty(payer: Address, amount: U256) -> () {
        transferTokenToSelf!(payer, ALPH, amount)
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false)
    pub fn payRoyaltyMultiToken(payer: Address, token: ByteVec, amount: U256) -> () {
        let collectionAddress = selfAddress!()

        transferToken!(payer, collectionAddress, token, amount)
    }

    @using(checkExternalCaller = true)
    pub fn withdrawRoyalty(to: Address, amount: U256) -> () {

        checkCaller!(collectionOwner == callerAddress!(), ErrorCodes.AdminOnly)

        withdraw(to, amount)
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn withdrawNonNativeRoyalty(to: Address, token: ByteVec, amount: U256) -> () {

        checkCaller!(collectionOwner == callerAddress!(), ErrorCodes.AdminOnly)

        assert!(token == mintToken, ErrorCodes.TokenMustMatchMintToken)

        transferToken!(selfAddress!(), to, mintToken, amount)
    }
}
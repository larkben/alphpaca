// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting, users can mint the arts
// in the collection sequentially by paying the mint price.
Abstract Contract NFTPublicSaleCollectionSequentialBase(
    nftMutableTemplateId: ByteVec,
    mut collectionUri: ByteVec,
    nftBaseUri: ByteVec,
    mut collectionOwner: Address,
    maxSupply: U256,
    mut mintPrice: U256,
    mut mintToken: ByteVec,
    mut maxBatchMintSize: U256,
    mut totalSupply: U256,
    mut ownerOnly: Bool
) extends MutableNFTCollectionBase(collectionUri, totalSupply, collectionOwner), NFTPublicSaleCollectionBase(nftBaseUri, maxSupply, mintPrice){
    event Mint(minter: Address, fromIndex: U256, mintSize: U256)

    enum ErrorCodes {
        IncorrectTokenIndex = 2
        InvalidMintBatchSize = 3
        InsufficientNumOfUnminted = 4
        IncorrectToken = 6
        AdminOnly = 5
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editCollectionUri(newUri: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        collectionUri = newUri
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editMintPrice(newPrice: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        mintPrice = newPrice
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editMintToken(newToken: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        mintToken = newToken
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editBatchSize(newSize: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        maxBatchMintSize = newSize
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editCollectionOwner(newOwner: Address) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        collectionOwner = newOwner
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn editMintStatus(newStatus: Bool) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        ownerOnly = newStatus
    }

    @using(preapprovedAssets = true)
    fn mint_(minter: Address, index: U256) -> ByteVec {

        // if true then only the collectionOwner can mint
        if (ownerOnly) {
            assert!(minter == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)
        }

        let (encodeImmutableFields, encodeMutableFields) = MutableNFT.encodeFields!(getNFTUri(index), selfContractId!(), index)
        return copyCreateSubContractWithToken!{minter -> ALPH: minimalContractDeposit!()}(
            toByteVec!(index),
            nftMutableTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )
    }

    @using(preapprovedAssets = true, updateFields = true, assetsInContract = true, checkExternalCaller = false)
    pub fn mint(token: ByteVec) -> (ByteVec) {
        assert!(totalSupply < maxSupply, ErrorCodes.IncorrectTokenIndex)
        assert!(token == mintToken, ErrorCodes.IncorrectToken)

        let minter = callerAddress!()
        let fromIndex = totalSupply
        let contractId = mint_{minter -> ALPH: minimalContractDeposit!()}(minter, fromIndex)

        transferToken!(minter, selfAddress!(), token, mintPrice)

        totalSupply = totalSupply + 1

        emit Mint(minter, fromIndex, 1)
        return contractId
    }

    @using(preapprovedAssets = true, updateFields = true, assetsInContract = true, checkExternalCaller = false)
    pub fn mintBatch(size: U256, token: ByteVec) -> ByteVec {
        assert!(size <= maxBatchMintSize, ErrorCodes.InvalidMintBatchSize)
        assert!(size <= (maxSupply - totalSupply), ErrorCodes.InsufficientNumOfUnminted)
        assert!(token == mintToken, ErrorCodes.IncorrectToken)

        let minter = callerAddress!()
        let fromIndex = totalSupply
        let mut contractIds = #
        for (let mut i = 0; i < size; i = i + 1) {
            contractIds = contractIds ++ mint_{minter -> ALPH: minimalContractDeposit!()}(minter, fromIndex + i)
        }

        transferToken!(minter, selfAddress!(), token, mintPrice * size)

        totalSupply = totalSupply + size

        emit Mint(minter, fromIndex, size)
        return contractIds
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn upgradeNFTCollection(newCode: ByteVec, newImmFieldsEncoded: ByteVec, newMutFieldsEncoded: ByteVec) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.AdminOnly)

        migrateWithFields!(newCode, newImmFieldsEncoded, newMutFieldsEncoded)       
    }
}

Contract StakeFactory(
    owner: Address,
    dev: Address,
    token: ByteVec,
    mut total: U256,
    mut users: U256,
    mut path: U256,
    //
    mut monthlyrewards: U256,
    // Contract
    stakecontract: ByteVec
) {
    event StakeDecreased(who: Address, amount: U256, contractaddy: Address)
    event StakeIncreased(who: Address, amount: U256, contractaddy: Address)

    enum ErrorCodes {
        InvalidCaller = 0
        ContractNotExist = 1
    }

    pub fn getOwner() -> (Address) {
        return owner
    }

    pub fn getToken() -> (ByteVec) {
        return token
    }

    pub fn getTotal() -> (U256) {
        return total
    }

    pub fn getUsers() -> (U256) {
        return users
    }

    pub fn getPath() -> (U256) {
        return path
    }

    pub fn doesStakeExist(staker: Address) -> (U256, Bool) {
        for (let mut i = 0; i < getPath(); i = i + 1) {
            let contract = subContractId!(toByteVec!(i))

            let user = Stake(contract).getOwner()

            if (user == staker) {
                return i, true                                        // the contract path to the stake
            }
        }

        return i, false                                               // the user does not exist
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    pub fn addstake(amount: U256) -> () {

        let (i, condition) = doesStakeExist(callerAddress!())

        if (condition != false) { // stake exists else new stake is made
            let contract = subContractId!(toByteVec!(i))
            Stake(contract).add(amount)

            total = total + amount

            emit StakeIncreased(callerAddress!(), amount, Stake(contract).getContractAddress())
        }
        else {
            let (encodeImmutableFields, encodeMutableFields) = Stake.encodeFields!(callerAddress!(), amount, selfAddress!())

            let stakeID = copyCreateSubContract!{callerAddress!() -> ALPH: 1 alph}(
                toByteVec!(path),
                stakecontract,                                                                                  
                encodeImmutableFields,
                encodeMutableFields
            )

            path = path + 1
            users = users + 1
            total = total + amount

            emit StakeIncreased(callerAddress!(), amount, byteVecToAddress!(stakeID))
        }
    }

    @using(preapprovedAssets = false, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn withdrawstake(amount: U256) -> () {
        let (i, condition) = doesStakeExist(callerAddress!())

        assert!(condition != false, ErrorCodes.ContractNotExist) // stake exists and assets will be removed
        
        let contract = subContractId!(toByteVec!(i))
        let alive = Stake(contract).remove(amount)

        total = total - amount

        transferTokenFromSelf!(callerAddress!(), getToken(), amount)

        if (alive == false) {
            users = users - 1
        }
    }

    pub fn calculaterewards() -> U256 {
        let mut totaltokens = 0

        for (let mut x = 0; x < getPath(); x = x + 1) {
            let contract = subContractId!(toByteVec!(x))

            let amount = Stake(contract).getAmount()

            let percentage = amount * 35
            let stake = percentage / 1000
            
            totaltokens = totaltokens + stake
        }

        let devfeepercent = totaltokens * monthlyrewards
        let devfee = devfeepercent / 1000

        return totaltokens + devfee
    }

    // awards 3.5% per month
    @using(preapprovedAssets = true, assetsInContract = false, updateFields = false, checkExternalCaller = false)
    pub fn distributerewards() -> () {

        let mut totaltokens = 0

        for (let mut x = 0; x < getPath(); x = x + 1) {
            let contract = subContractId!(toByteVec!(x))
    
            let amount = Stake(contract).getAmount()
    
            let percentage = amount * monthlyrewards
            let stake = percentage / 1000
    
            Stake(contract).add(stake)
                
            totaltokens = totaltokens + stake
        }

        let devfeepercent = totaltokens * monthlyrewards
        let devfee = devfeepercent / 1000

        transferToken!(callerAddress!(), dev, getToken(), devfee)
    
        transferToken!(callerAddress!(), selfAddress!(), getToken(), totaltokens)
    }

    @using(preapprovedAssets = false, assetsInContract = false, updateFields = true, checkExternalCaller = true)
    pub fn editrewards(newreward: U256) -> () {
        checkCaller!(owner == callerAddress!(), ErrorCodes.InvalidCaller)

        monthlyrewards = newreward
    }
}

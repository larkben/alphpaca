Contract Stake (
    owner: Address,
    mut amount: U256,
    pcontract: Address
) {
    enum ErrorCodes {
        InvalidCaller = 0
    }

    pub fn getOwner() -> Address {
        return owner
    }

    pub fn getAmount() -> U256 {
        return amount
    }

    pub fn getPContract() -> Address {
        return pcontract
    }

    pub fn getContractAddress() -> Address {
        return selfAddress!()
    }

    @using(preapprovedAssets = false, assetsInContract = false, updateFields = true, checkExternalCaller = true)
    pub fn add(add: U256) -> () {
        checkCaller!(owner == getPContract(), ErrorCodes.InvalidCaller)

        amount = amount + add
    }

    @using(preapprovedAssets = false, assetsInContract = true, updateFields = true, checkExternalCaller = true)
    pub fn remove(sub: U256) -> Bool {
        checkCaller!(owner == getPContract(), ErrorCodes.InvalidCaller)

        amount = amount - sub

        if (amount == 0) {
            destroySelf!(getOwner())

            return false // contract has been destroyed
        }

        return true // contract still alive
    }
    
}
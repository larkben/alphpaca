import "std/nft_interface"

Contract PacaNFT (
    mut tokenUri: ByteVec,
    nftIndex: U256,
    collectionId: ByteVec,
    // staking tools
    mut tokenStaked: U256,
    mut timeStamp: U256
) implements INFT {
    enum ErrorCodes {
        MustBeCalledFromCollection = 0
    }

    pub fn getTokenUri() -> ByteVec {
        return tokenUri
    }

    pub fn getCollectionIndex() -> (ByteVec, U256) {
        return collectionId, nftIndex
    }

    @using(checkExternalCaller = true, updateFields = true) 
    pub fn editUri(newUri: ByteVec) -> () {
        checkCaller!(callerAddress!() != contractIdToAddress!(collectionId), ErrorCodes.MustBeCalledFromCollection)
        tokenUri = newUri
    }

    @using(checkExternalCaller = true, updateFields = true) 
    pub fn editTokenStaked(newAmount: U256) -> () {
        checkCaller!(callerAddress!() != contractIdToAddress!(collectionId), ErrorCodes.MustBeCalledFromCollection)
        tokenStaked = newAmount
    }

    @using(checkExternalCaller = true, updateFields = true) 
    pub fn editTimeStamp(newTime: U256) -> () {
        checkCaller!(callerAddress!() != contractIdToAddress!(collectionId), ErrorCodes.MustBeCalledFromCollection)
        timeStamp = newTime
    }
}
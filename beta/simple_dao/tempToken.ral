import "std/fungible_token_interface"

Contract VoteToken (
    symbol: ByteVec,
    name: ByteVec,
    decimals: U256,
    supply: U256,
    mut balance: U256,
    owner: Address,
    daofactory: Address
) implements IFungibleToken {

    enum ErrorCodes {
        UserNotUsingDao = 0
        InvalidTokenAmount = 1
    }

    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getDecimals() -> U256 {
        return decimals
    }

    pub fn getTotalSupply() -> U256 {
        return supply
    }

    pub fn getOwner() -> Address {
        return owner
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn emitvotetoken(daouser: Address, amount: U256) -> () {

        assert!(callerAddress!() == daofactory, ErrorCodes.UserNotUsingDao)

        assert!(balance > 0, ErrorCodes.InvalidTokenAmount)

        balance = balance - amount

        transferToken!(selfAddress!(), daouser, selfTokenId!(), amount)
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroytemptoken(daouser: Address, amount: U256) -> () {

        assert!(callerAddress!() == daofactory, ErrorCodes.UserNotUsingDao)

        burnToken!(selfAddress!(), selfTokenId!(), balance)                 // remaining tokens burned

        destroySelf!(daouser)                                               // user reclaims 1 alph deposit
    }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LoanMarketContractJson } from "../loans/LoanMarket.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, PairInfo, PlayerData, AllStructs } from "./types";

// Custom types for the contract
export namespace LoanMarketTypes {
  export type Fields = {
    creator: Address;
    token: HexString;
    tokenAmount: bigint;
    minTokenAmount: bigint;
    minInterest: bigint;
    maxTime: bigint;
    liquidation: boolean;
    collateralRatioRequired: boolean;
    ratioRequired: bigint;
    parentContract: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getLoaneeTokenDetails: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getLoaneeDetails: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[Address, bigint, bigint, bigint, boolean]>;
    };
    getCollateralDetails: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[boolean, bigint]>;
    };
    editMarketValues: {
      params: CallContractParams<{
        caller: Address;
        newMinAmount: bigint;
        newInterest: bigint;
        newTime: bigint;
        canBeLiq: boolean;
        collateral: boolean;
        ratio: bigint;
      }>;
      result: CallContractResult<null>;
    };
    delegate: {
      params: CallContractParams<{ caller: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    add: {
      params: CallContractParams<{
        caller: Address;
        amount: bigint;
        gas: boolean;
      }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ caller: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    destroy: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getLoaneeTokenDetails: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLoaneeDetails: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollateralDetails: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    editMarketValues: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        newMinAmount: bigint;
        newInterest: bigint;
        newTime: bigint;
        canBeLiq: boolean;
        collateral: boolean;
        ratio: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    delegate: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    add: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
        gas: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroy: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LoanMarketInstance,
  LoanMarketTypes.Fields
> {
  encodeFields(fields: LoanMarketTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): LoanMarketInstance {
    return new LoanMarketInstance(address);
  }

  tests = {
    getLoaneeTokenDetails: async (
      params: Omit<
        TestContractParamsWithoutMaps<LoanMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getLoaneeTokenDetails",
        params,
        getContractByCodeHash
      );
    },
    getLoaneeDetails: async (
      params: Omit<
        TestContractParamsWithoutMaps<LoanMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<
      TestContractResultWithoutMaps<[Address, bigint, bigint, bigint, boolean]>
    > => {
      return testMethod(
        this,
        "getLoaneeDetails",
        params,
        getContractByCodeHash
      );
    },
    getCollateralDetails: async (
      params: Omit<
        TestContractParamsWithoutMaps<LoanMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[boolean, bigint]>> => {
      return testMethod(
        this,
        "getCollateralDetails",
        params,
        getContractByCodeHash
      );
    },
    editMarketValues: async (
      params: TestContractParamsWithoutMaps<
        LoanMarketTypes.Fields,
        {
          caller: Address;
          newMinAmount: bigint;
          newInterest: bigint;
          newTime: bigint;
          canBeLiq: boolean;
          collateral: boolean;
          ratio: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editMarketValues",
        params,
        getContractByCodeHash
      );
    },
    delegate: async (
      params: TestContractParamsWithoutMaps<
        LoanMarketTypes.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "delegate", params, getContractByCodeHash);
    },
    add: async (
      params: TestContractParamsWithoutMaps<
        LoanMarketTypes.Fields,
        { caller: Address; amount: bigint; gas: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "add", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        LoanMarketTypes.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    destroy: async (
      params: TestContractParamsWithoutMaps<
        LoanMarketTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: LoanMarketTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const LoanMarket = new Factory(
  Contract.fromJson(
    LoanMarketContractJson,
    "",
    "a9cc0b2ee9caa208dc8ca365d3db5b86d548798aafe8f9cf94f1653636b0a676",
    AllStructs
  )
);
registerContract(LoanMarket);

// Use this class to interact with the blockchain
export class LoanMarketInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LoanMarketTypes.State> {
    return fetchContractState(LoanMarket, this);
  }

  view = {
    getLoaneeTokenDetails: async (
      params?: LoanMarketTypes.CallMethodParams<"getLoaneeTokenDetails">
    ): Promise<LoanMarketTypes.CallMethodResult<"getLoaneeTokenDetails">> => {
      return callMethod(
        LoanMarket,
        this,
        "getLoaneeTokenDetails",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLoaneeDetails: async (
      params?: LoanMarketTypes.CallMethodParams<"getLoaneeDetails">
    ): Promise<LoanMarketTypes.CallMethodResult<"getLoaneeDetails">> => {
      return callMethod(
        LoanMarket,
        this,
        "getLoaneeDetails",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollateralDetails: async (
      params?: LoanMarketTypes.CallMethodParams<"getCollateralDetails">
    ): Promise<LoanMarketTypes.CallMethodResult<"getCollateralDetails">> => {
      return callMethod(
        LoanMarket,
        this,
        "getCollateralDetails",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    editMarketValues: async (
      params: LoanMarketTypes.CallMethodParams<"editMarketValues">
    ): Promise<LoanMarketTypes.CallMethodResult<"editMarketValues">> => {
      return callMethod(
        LoanMarket,
        this,
        "editMarketValues",
        params,
        getContractByCodeHash
      );
    },
    delegate: async (
      params: LoanMarketTypes.CallMethodParams<"delegate">
    ): Promise<LoanMarketTypes.CallMethodResult<"delegate">> => {
      return callMethod(
        LoanMarket,
        this,
        "delegate",
        params,
        getContractByCodeHash
      );
    },
    add: async (
      params: LoanMarketTypes.CallMethodParams<"add">
    ): Promise<LoanMarketTypes.CallMethodResult<"add">> => {
      return callMethod(LoanMarket, this, "add", params, getContractByCodeHash);
    },
    withdraw: async (
      params: LoanMarketTypes.CallMethodParams<"withdraw">
    ): Promise<LoanMarketTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        LoanMarket,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    destroy: async (
      params: LoanMarketTypes.CallMethodParams<"destroy">
    ): Promise<LoanMarketTypes.CallMethodResult<"destroy">> => {
      return callMethod(
        LoanMarket,
        this,
        "destroy",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getLoaneeTokenDetails: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"getLoaneeTokenDetails">
    ): Promise<
      LoanMarketTypes.SignExecuteMethodResult<"getLoaneeTokenDetails">
    > => {
      return signExecuteMethod(
        LoanMarket,
        this,
        "getLoaneeTokenDetails",
        params
      );
    },
    getLoaneeDetails: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"getLoaneeDetails">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"getLoaneeDetails">> => {
      return signExecuteMethod(LoanMarket, this, "getLoaneeDetails", params);
    },
    getCollateralDetails: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"getCollateralDetails">
    ): Promise<
      LoanMarketTypes.SignExecuteMethodResult<"getCollateralDetails">
    > => {
      return signExecuteMethod(
        LoanMarket,
        this,
        "getCollateralDetails",
        params
      );
    },
    editMarketValues: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"editMarketValues">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"editMarketValues">> => {
      return signExecuteMethod(LoanMarket, this, "editMarketValues", params);
    },
    delegate: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"delegate">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"delegate">> => {
      return signExecuteMethod(LoanMarket, this, "delegate", params);
    },
    add: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"add">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"add">> => {
      return signExecuteMethod(LoanMarket, this, "add", params);
    },
    withdraw: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(LoanMarket, this, "withdraw", params);
    },
    destroy: async (
      params: LoanMarketTypes.SignExecuteMethodParams<"destroy">
    ): Promise<LoanMarketTypes.SignExecuteMethodResult<"destroy">> => {
      return signExecuteMethod(LoanMarket, this, "destroy", params);
    },
  };

  async multicall<Calls extends LoanMarketTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LoanMarketTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends LoanMarketTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<LoanMarketTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | LoanMarketTypes.MultiCallParams
      | LoanMarketTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      LoanMarket,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as SwapContractJson } from "../swaps/Swap.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SwapTypes {
  export type Fields = {
    token: HexString;
    amount: bigint;
    tradetoken: HexString;
    tamount: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export type SuccessEvent = ContractEvent<{
    id: HexString;
    tone: HexString;
    aone: bigint;
    ttwo: HexString;
    atwo: bigint;
  }>;
  export type CancelEvent = ContractEvent<{ id: HexString }>;
  export type EditEvent = ContractEvent<{
    id: HexString;
    ttwo: HexString;
    atwo: bigint;
  }>;

  export interface CallMethodTable {
    getToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTradeToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getTAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<SwapInstance, SwapTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SwapTypes.Fields;
  }

  eventIndex = { Success: 0, Cancel: 1, Edit: 2 };

  at(address: string): SwapInstance {
    return new SwapInstance(address);
  }

  tests = {
    getToken: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getToken", params);
    },
    getAmount: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAmount", params);
    },
    getTradeToken: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getTradeToken", params);
    },
    getTAmount: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTAmount", params);
    },
    getOwner: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    confirmswap: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "confirmswap", params);
    },
    cancelswap: async (
      params: Omit<TestContractParams<SwapTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "cancelswap", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Swap = new Factory(
  Contract.fromJson(
    SwapContractJson,
    "",
    "7203c62f95e45ab6fa6b14a0c3f20480d255d86459ab1160ee4bae013a35be93"
  )
);

// Use this class to interact with the blockchain
export class SwapInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SwapTypes.State> {
    return fetchContractState(Swap, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeSuccessEvent(
    options: EventSubscribeOptions<SwapTypes.SuccessEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Swap.contract,
      this,
      options,
      "Success",
      fromCount
    );
  }

  subscribeCancelEvent(
    options: EventSubscribeOptions<SwapTypes.CancelEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Swap.contract,
      this,
      options,
      "Cancel",
      fromCount
    );
  }

  subscribeEditEvent(
    options: EventSubscribeOptions<SwapTypes.EditEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Swap.contract,
      this,
      options,
      "Edit",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      SwapTypes.SuccessEvent | SwapTypes.CancelEvent | SwapTypes.EditEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Swap.contract, this, options, fromCount);
  }

  methods = {
    getToken: async (
      params?: SwapTypes.CallMethodParams<"getToken">
    ): Promise<SwapTypes.CallMethodResult<"getToken">> => {
      return callMethod(
        Swap,
        this,
        "getToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmount: async (
      params?: SwapTypes.CallMethodParams<"getAmount">
    ): Promise<SwapTypes.CallMethodResult<"getAmount">> => {
      return callMethod(
        Swap,
        this,
        "getAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTradeToken: async (
      params?: SwapTypes.CallMethodParams<"getTradeToken">
    ): Promise<SwapTypes.CallMethodResult<"getTradeToken">> => {
      return callMethod(
        Swap,
        this,
        "getTradeToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTAmount: async (
      params?: SwapTypes.CallMethodParams<"getTAmount">
    ): Promise<SwapTypes.CallMethodResult<"getTAmount">> => {
      return callMethod(
        Swap,
        this,
        "getTAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: SwapTypes.CallMethodParams<"getOwner">
    ): Promise<SwapTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Swap,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SwapTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SwapTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Swap,
      this,
      calls,
      getContractByCodeHash
    )) as SwapTypes.MultiCallResults<Calls>;
  }
}

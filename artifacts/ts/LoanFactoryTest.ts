/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LoanFactoryTestContractJson } from "../test/LoanFactoryTest.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  PairInfo,
  PlayerData,
  TokenData,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace LoanFactoryTestTypes {
  export type Fields = {
    admin: Address;
    loanTemplate: HexString;
    marketTemplate: HexString;
    activeLoans: bigint;
    rate: bigint;
    oracle: HexString;
  };

  export type State = ContractState<Fields>;

  export type NewLoanEvent = ContractEvent<{
    contract: HexString;
    tokenRequested: HexString;
    tokenAmount: bigint;
    collateralToken: HexString;
    collateralAmount: bigint;
    interest: bigint;
    duration: bigint;
    who: Address;
  }>;
  export type AcceptedLoanEvent = ContractEvent<{
    contract: HexString;
    who: Address;
  }>;
  export type LoanRemovedEvent = ContractEvent<{
    contract: HexString;
    who: Address;
  }>;
  export type LoanWithdrawEvent = ContractEvent<{
    contract: HexString;
    forfeit: boolean;
    who: Address;
  }>;
  export type LoanLiquidationEvent = ContractEvent<{
    contract: HexString;
    token: HexString;
    startingBid: bigint;
  }>;
  export type MarketCreatedEvent = ContractEvent<{
    contract: HexString;
    token: HexString;
    amount: bigint;
    minInterest: bigint;
    maxTime: bigint;
    liquidation: boolean;
    who: Address;
  }>;
  export type MarketUpdatedEvent = ContractEvent<{
    contract: HexString;
    token: HexString;
    amount: bigint;
    minInterest: bigint;
    maxTime: bigint;
    liquidation: boolean;
  }>;
  export type MarketDestroyedEvent = ContractEvent<{
    contract: HexString;
    who: Address;
  }>;

  export interface CallMethodTable {
    determineCollateralRatio: {
      params: CallContractParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        threshhold: bigint;
      }>;
      result: CallContractResult<[bigint, boolean]>;
    };
    getRequiredTokens: {
      params: CallContractParams<{
        contractId: HexString;
        withInterest: boolean;
      }>;
      result: CallContractResult<[HexString, bigint]>;
    };
    checkTokenAmount: {
      params: CallContractParams<{ priceIn: bigint; commissionRateIn: bigint }>;
      result: CallContractResult<null>;
    };
    createLoan: {
      params: CallContractParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
        canLiquidate: boolean;
      }>;
      result: CallContractResult<null>;
    };
    acceptMarket: {
      params: CallContractParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
        loaneeMarket: HexString;
      }>;
      result: CallContractResult<null>;
    };
    accept: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    cancel: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    pay: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    forfeit: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    liquidation: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    bid: {
      params: CallContractParams<{ contractId: HexString; bidAmount: bigint }>;
      result: CallContractResult<null>;
    };
    redeem: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    loaneeMarket: {
      params: CallContractParams<{
        token: HexString;
        tokenAmount: bigint;
        minInterest: bigint;
        maxTime: bigint;
        liquidation: boolean;
      }>;
      result: CallContractResult<null>;
    };
    editInterest: {
      params: CallContractParams<{
        contractId: HexString;
        newInterest: bigint;
      }>;
      result: CallContractResult<null>;
    };
    editTime: {
      params: CallContractParams<{ contractId: HexString; newTime: bigint }>;
      result: CallContractResult<null>;
    };
    canLiquidate: {
      params: CallContractParams<{ contractId: HexString; liquid: boolean }>;
      result: CallContractResult<null>;
    };
    addFunds: {
      params: CallContractParams<{
        contractId: HexString;
        token: HexString;
        amount: bigint;
        gas: boolean;
      }>;
      result: CallContractResult<null>;
    };
    withdrawFunds: {
      params: CallContractParams<{
        contractId: HexString;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    destroyMarket: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    editRate: {
      params: CallContractParams<{ newRate: bigint }>;
      result: CallContractResult<null>;
    };
    tokenMapping: {
      params: CallContractParams<{
        token: HexString;
        add: boolean;
        pairtoken: HexString;
        decimals: bigint;
      }>;
      result: CallContractResult<null>;
    };
    destroyLoanFactory: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdrawLoanFactoryFees: {
      params: CallContractParams<{
        who: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    updateLoanFactoryCode: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updateLoanFactoryFields: {
      params: CallContractParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    determineCollateralRatio: {
      params: SignExecuteContractMethodParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        threshhold: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getRequiredTokens: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        withInterest: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    checkTokenAmount: {
      params: SignExecuteContractMethodParams<{
        priceIn: bigint;
        commissionRateIn: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createLoan: {
      params: SignExecuteContractMethodParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
        canLiquidate: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    acceptMarket: {
      params: SignExecuteContractMethodParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
        loaneeMarket: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    accept: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    cancel: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    pay: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    forfeit: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    liquidation: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    bid: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        bidAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    redeem: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    loaneeMarket: {
      params: SignExecuteContractMethodParams<{
        token: HexString;
        tokenAmount: bigint;
        minInterest: bigint;
        maxTime: bigint;
        liquidation: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    editInterest: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        newInterest: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    editTime: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        newTime: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    canLiquidate: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        liquid: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addFunds: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        token: HexString;
        amount: bigint;
        gas: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawFunds: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroyMarket: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editRate: {
      params: SignExecuteContractMethodParams<{ newRate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    tokenMapping: {
      params: SignExecuteContractMethodParams<{
        token: HexString;
        add: boolean;
        pairtoken: HexString;
        decimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroyLoanFactory: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdrawLoanFactoryFees: {
      params: SignExecuteContractMethodParams<{
        who: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateLoanFactoryCode: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateLoanFactoryFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { tokenPairs?: Map<HexString, PairInfo> };
}

class Factory extends ContractFactory<
  LoanFactoryTestInstance,
  LoanFactoryTestTypes.Fields
> {
  encodeFields(fields: LoanFactoryTestTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    NewLoan: 0,
    AcceptedLoan: 1,
    LoanRemoved: 2,
    LoanWithdraw: 3,
    LoanLiquidation: 4,
    MarketCreated: 5,
    MarketUpdated: 6,
    MarketDestroyed: 7,
  };
  consts = {
    LoanCodes: { NotAdmin: BigInt("0"), TokenSizeTooSmall: BigInt("1") },
  };

  at(address: string): LoanFactoryTestInstance {
    return new LoanFactoryTestInstance(address);
  }

  tests = {
    determineCollateralRatio: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          tokenRequested: HexString;
          tokenAmount: bigint;
          collateralToken: HexString;
          collateralAmount: bigint;
          threshhold: bigint;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<
      TestContractResult<[bigint, boolean], LoanFactoryTestTypes.Maps>
    > => {
      return testMethod(
        this,
        "determineCollateralRatio",
        params,
        getContractByCodeHash
      );
    },
    getRequiredTokens: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; withInterest: boolean },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<
      TestContractResult<[HexString, bigint], LoanFactoryTestTypes.Maps>
    > => {
      return testMethod(
        this,
        "getRequiredTokens",
        params,
        getContractByCodeHash
      );
    },
    checkTokenAmount: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { priceIn: bigint; commissionRateIn: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(
        this,
        "checkTokenAmount",
        params,
        getContractByCodeHash
      );
    },
    createLoan: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          tokenRequested: HexString;
          tokenAmount: bigint;
          collateralToken: HexString;
          collateralAmount: bigint;
          interest: bigint;
          duration: bigint;
          canLiquidate: boolean;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "createLoan", params, getContractByCodeHash);
    },
    acceptMarket: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          tokenRequested: HexString;
          tokenAmount: bigint;
          collateralToken: HexString;
          collateralAmount: bigint;
          interest: bigint;
          duration: bigint;
          loaneeMarket: HexString;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "acceptMarket", params, getContractByCodeHash);
    },
    accept: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "accept", params, getContractByCodeHash);
    },
    cancel: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "cancel", params, getContractByCodeHash);
    },
    pay: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "pay", params, getContractByCodeHash);
    },
    forfeit: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "forfeit", params, getContractByCodeHash);
    },
    liquidation: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "liquidation", params, getContractByCodeHash);
    },
    bid: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; bidAmount: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "bid", params, getContractByCodeHash);
    },
    redeem: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "redeem", params, getContractByCodeHash);
    },
    loaneeMarket: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          token: HexString;
          tokenAmount: bigint;
          minInterest: bigint;
          maxTime: bigint;
          liquidation: boolean;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "loaneeMarket", params, getContractByCodeHash);
    },
    editInterest: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; newInterest: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "editInterest", params, getContractByCodeHash);
    },
    editTime: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; newTime: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "editTime", params, getContractByCodeHash);
    },
    canLiquidate: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; liquid: boolean },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "canLiquidate", params, getContractByCodeHash);
    },
    addFunds: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          contractId: HexString;
          token: HexString;
          amount: bigint;
          gas: boolean;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "addFunds", params, getContractByCodeHash);
    },
    withdrawFunds: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString; token: HexString; amount: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "withdrawFunds", params, getContractByCodeHash);
    },
    destroyMarket: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { contractId: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "destroyMarket", params, getContractByCodeHash);
    },
    editRate: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { newRate: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "editRate", params, getContractByCodeHash);
    },
    tokenMapping: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        {
          token: HexString;
          add: boolean;
          pairtoken: HexString;
          decimals: bigint;
        },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(this, "tokenMapping", params, getContractByCodeHash);
    },
    destroyLoanFactory: async (
      params: Omit<
        TestContractParams<
          LoanFactoryTestTypes.Fields,
          never,
          LoanFactoryTestTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(
        this,
        "destroyLoanFactory",
        params,
        getContractByCodeHash
      );
    },
    withdrawLoanFactoryFees: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { who: Address; token: HexString; amount: bigint },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(
        this,
        "withdrawLoanFactoryFees",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryCode: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { newCode: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(
        this,
        "updateLoanFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryFields: async (
      params: TestContractParams<
        LoanFactoryTestTypes.Fields,
        { newCode: HexString; immFields: HexString; mutFields: HexString },
        LoanFactoryTestTypes.Maps
      >
    ): Promise<TestContractResult<null, LoanFactoryTestTypes.Maps>> => {
      return testMethod(
        this,
        "updateLoanFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: LoanFactoryTestTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: LoanFactoryTestTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const LoanFactoryTest = new Factory(
  Contract.fromJson(
    LoanFactoryTestContractJson,
    "=86-2+8d=2-2+a1=2-2+ba=2-2+ce=2-2+e6=3106-2+4023=28-2+11=52+7a7e0214696e73657274206174206d617020706174683a2000=19-1+a=36+7a7e021472656d6f7665206174206d617020706174683a2000=184",
    "3fd3b570b9e29d0781b5968e05d2264cb7b59e9cadf2b1eb653e50cc7b66b404",
    AllStructs
  )
);
registerContract(LoanFactoryTest);

// Use this class to interact with the blockchain
export class LoanFactoryTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    tokenPairs: new RalphMap<HexString, PairInfo>(
      LoanFactoryTest.contract,
      this.contractId,
      "tokenPairs"
    ),
  };

  async fetchState(): Promise<LoanFactoryTestTypes.State> {
    return fetchContractState(LoanFactoryTest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewLoanEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.NewLoanEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "NewLoan",
      fromCount
    );
  }

  subscribeAcceptedLoanEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.AcceptedLoanEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "AcceptedLoan",
      fromCount
    );
  }

  subscribeLoanRemovedEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.LoanRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "LoanRemoved",
      fromCount
    );
  }

  subscribeLoanWithdrawEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.LoanWithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "LoanWithdraw",
      fromCount
    );
  }

  subscribeLoanLiquidationEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.LoanLiquidationEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "LoanLiquidation",
      fromCount
    );
  }

  subscribeMarketCreatedEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.MarketCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "MarketCreated",
      fromCount
    );
  }

  subscribeMarketUpdatedEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.MarketUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "MarketUpdated",
      fromCount
    );
  }

  subscribeMarketDestroyedEvent(
    options: EventSubscribeOptions<LoanFactoryTestTypes.MarketDestroyedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactoryTest.contract,
      this,
      options,
      "MarketDestroyed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LoanFactoryTestTypes.NewLoanEvent
      | LoanFactoryTestTypes.AcceptedLoanEvent
      | LoanFactoryTestTypes.LoanRemovedEvent
      | LoanFactoryTestTypes.LoanWithdrawEvent
      | LoanFactoryTestTypes.LoanLiquidationEvent
      | LoanFactoryTestTypes.MarketCreatedEvent
      | LoanFactoryTestTypes.MarketUpdatedEvent
      | LoanFactoryTestTypes.MarketDestroyedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LoanFactoryTest.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    determineCollateralRatio: async (
      params: LoanFactoryTestTypes.CallMethodParams<"determineCollateralRatio">
    ): Promise<
      LoanFactoryTestTypes.CallMethodResult<"determineCollateralRatio">
    > => {
      return callMethod(
        LoanFactoryTest,
        this,
        "determineCollateralRatio",
        params,
        getContractByCodeHash
      );
    },
    getRequiredTokens: async (
      params: LoanFactoryTestTypes.CallMethodParams<"getRequiredTokens">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"getRequiredTokens">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "getRequiredTokens",
        params,
        getContractByCodeHash
      );
    },
    checkTokenAmount: async (
      params: LoanFactoryTestTypes.CallMethodParams<"checkTokenAmount">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"checkTokenAmount">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "checkTokenAmount",
        params,
        getContractByCodeHash
      );
    },
    createLoan: async (
      params: LoanFactoryTestTypes.CallMethodParams<"createLoan">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"createLoan">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "createLoan",
        params,
        getContractByCodeHash
      );
    },
    acceptMarket: async (
      params: LoanFactoryTestTypes.CallMethodParams<"acceptMarket">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"acceptMarket">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "acceptMarket",
        params,
        getContractByCodeHash
      );
    },
    accept: async (
      params: LoanFactoryTestTypes.CallMethodParams<"accept">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"accept">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "accept",
        params,
        getContractByCodeHash
      );
    },
    cancel: async (
      params: LoanFactoryTestTypes.CallMethodParams<"cancel">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"cancel">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "cancel",
        params,
        getContractByCodeHash
      );
    },
    pay: async (
      params: LoanFactoryTestTypes.CallMethodParams<"pay">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"pay">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "pay",
        params,
        getContractByCodeHash
      );
    },
    forfeit: async (
      params: LoanFactoryTestTypes.CallMethodParams<"forfeit">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"forfeit">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "forfeit",
        params,
        getContractByCodeHash
      );
    },
    liquidation: async (
      params: LoanFactoryTestTypes.CallMethodParams<"liquidation">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"liquidation">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "liquidation",
        params,
        getContractByCodeHash
      );
    },
    bid: async (
      params: LoanFactoryTestTypes.CallMethodParams<"bid">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"bid">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "bid",
        params,
        getContractByCodeHash
      );
    },
    redeem: async (
      params: LoanFactoryTestTypes.CallMethodParams<"redeem">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"redeem">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "redeem",
        params,
        getContractByCodeHash
      );
    },
    loaneeMarket: async (
      params: LoanFactoryTestTypes.CallMethodParams<"loaneeMarket">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"loaneeMarket">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "loaneeMarket",
        params,
        getContractByCodeHash
      );
    },
    editInterest: async (
      params: LoanFactoryTestTypes.CallMethodParams<"editInterest">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"editInterest">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "editInterest",
        params,
        getContractByCodeHash
      );
    },
    editTime: async (
      params: LoanFactoryTestTypes.CallMethodParams<"editTime">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"editTime">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "editTime",
        params,
        getContractByCodeHash
      );
    },
    canLiquidate: async (
      params: LoanFactoryTestTypes.CallMethodParams<"canLiquidate">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"canLiquidate">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "canLiquidate",
        params,
        getContractByCodeHash
      );
    },
    addFunds: async (
      params: LoanFactoryTestTypes.CallMethodParams<"addFunds">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"addFunds">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "addFunds",
        params,
        getContractByCodeHash
      );
    },
    withdrawFunds: async (
      params: LoanFactoryTestTypes.CallMethodParams<"withdrawFunds">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"withdrawFunds">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "withdrawFunds",
        params,
        getContractByCodeHash
      );
    },
    destroyMarket: async (
      params: LoanFactoryTestTypes.CallMethodParams<"destroyMarket">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"destroyMarket">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "destroyMarket",
        params,
        getContractByCodeHash
      );
    },
    editRate: async (
      params: LoanFactoryTestTypes.CallMethodParams<"editRate">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"editRate">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "editRate",
        params,
        getContractByCodeHash
      );
    },
    tokenMapping: async (
      params: LoanFactoryTestTypes.CallMethodParams<"tokenMapping">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"tokenMapping">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "tokenMapping",
        params,
        getContractByCodeHash
      );
    },
    destroyLoanFactory: async (
      params?: LoanFactoryTestTypes.CallMethodParams<"destroyLoanFactory">
    ): Promise<LoanFactoryTestTypes.CallMethodResult<"destroyLoanFactory">> => {
      return callMethod(
        LoanFactoryTest,
        this,
        "destroyLoanFactory",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdrawLoanFactoryFees: async (
      params: LoanFactoryTestTypes.CallMethodParams<"withdrawLoanFactoryFees">
    ): Promise<
      LoanFactoryTestTypes.CallMethodResult<"withdrawLoanFactoryFees">
    > => {
      return callMethod(
        LoanFactoryTest,
        this,
        "withdrawLoanFactoryFees",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryCode: async (
      params: LoanFactoryTestTypes.CallMethodParams<"updateLoanFactoryCode">
    ): Promise<
      LoanFactoryTestTypes.CallMethodResult<"updateLoanFactoryCode">
    > => {
      return callMethod(
        LoanFactoryTest,
        this,
        "updateLoanFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryFields: async (
      params: LoanFactoryTestTypes.CallMethodParams<"updateLoanFactoryFields">
    ): Promise<
      LoanFactoryTestTypes.CallMethodResult<"updateLoanFactoryFields">
    > => {
      return callMethod(
        LoanFactoryTest,
        this,
        "updateLoanFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    determineCollateralRatio: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"determineCollateralRatio">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"determineCollateralRatio">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "determineCollateralRatio",
        params
      );
    },
    getRequiredTokens: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"getRequiredTokens">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"getRequiredTokens">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "getRequiredTokens",
        params
      );
    },
    checkTokenAmount: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"checkTokenAmount">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"checkTokenAmount">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "checkTokenAmount",
        params
      );
    },
    createLoan: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"createLoan">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"createLoan">> => {
      return signExecuteMethod(LoanFactoryTest, this, "createLoan", params);
    },
    acceptMarket: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"acceptMarket">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"acceptMarket">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "acceptMarket", params);
    },
    accept: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"accept">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"accept">> => {
      return signExecuteMethod(LoanFactoryTest, this, "accept", params);
    },
    cancel: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"cancel">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"cancel">> => {
      return signExecuteMethod(LoanFactoryTest, this, "cancel", params);
    },
    pay: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"pay">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"pay">> => {
      return signExecuteMethod(LoanFactoryTest, this, "pay", params);
    },
    forfeit: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"forfeit">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"forfeit">> => {
      return signExecuteMethod(LoanFactoryTest, this, "forfeit", params);
    },
    liquidation: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"liquidation">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"liquidation">> => {
      return signExecuteMethod(LoanFactoryTest, this, "liquidation", params);
    },
    bid: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"bid">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"bid">> => {
      return signExecuteMethod(LoanFactoryTest, this, "bid", params);
    },
    redeem: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"redeem">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"redeem">> => {
      return signExecuteMethod(LoanFactoryTest, this, "redeem", params);
    },
    loaneeMarket: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"loaneeMarket">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"loaneeMarket">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "loaneeMarket", params);
    },
    editInterest: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"editInterest">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"editInterest">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "editInterest", params);
    },
    editTime: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"editTime">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"editTime">> => {
      return signExecuteMethod(LoanFactoryTest, this, "editTime", params);
    },
    canLiquidate: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"canLiquidate">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"canLiquidate">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "canLiquidate", params);
    },
    addFunds: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"addFunds">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"addFunds">> => {
      return signExecuteMethod(LoanFactoryTest, this, "addFunds", params);
    },
    withdrawFunds: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"withdrawFunds">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"withdrawFunds">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "withdrawFunds", params);
    },
    destroyMarket: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"destroyMarket">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"destroyMarket">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "destroyMarket", params);
    },
    editRate: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"editRate">
    ): Promise<LoanFactoryTestTypes.SignExecuteMethodResult<"editRate">> => {
      return signExecuteMethod(LoanFactoryTest, this, "editRate", params);
    },
    tokenMapping: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"tokenMapping">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"tokenMapping">
    > => {
      return signExecuteMethod(LoanFactoryTest, this, "tokenMapping", params);
    },
    destroyLoanFactory: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"destroyLoanFactory">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"destroyLoanFactory">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "destroyLoanFactory",
        params
      );
    },
    withdrawLoanFactoryFees: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"withdrawLoanFactoryFees">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"withdrawLoanFactoryFees">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "withdrawLoanFactoryFees",
        params
      );
    },
    updateLoanFactoryCode: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"updateLoanFactoryCode">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"updateLoanFactoryCode">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "updateLoanFactoryCode",
        params
      );
    },
    updateLoanFactoryFields: async (
      params: LoanFactoryTestTypes.SignExecuteMethodParams<"updateLoanFactoryFields">
    ): Promise<
      LoanFactoryTestTypes.SignExecuteMethodResult<"updateLoanFactoryFields">
    > => {
      return signExecuteMethod(
        LoanFactoryTest,
        this,
        "updateLoanFactoryFields",
        params
      );
    },
  };

  async multicall<Calls extends LoanFactoryTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LoanFactoryTestTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends LoanFactoryTestTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<LoanFactoryTestTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | LoanFactoryTestTypes.MultiCallParams
      | LoanFactoryTestTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      LoanFactoryTest,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

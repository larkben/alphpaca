/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PvpBattleContractJson } from "../gamefi/PvpBattle.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, MoveReturn, PacaFlip, AllStructs } from "./types";

// Custom types for the contract
export namespace PvpBattleTypes {
  export type Fields = {
    owner: Address;
    alphpacaOwner: HexString;
    challenger: Address;
    alphpacaChallenger: HexString;
    isActive: boolean;
    turn: boolean;
    battleFinished: boolean;
    timeSinceLastMove: bigint;
    wageredAsset: HexString;
    wageredAmount: bigint;
    oracle: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    random: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    damageFormula: {
      params: CallContractParams<{
        level: bigint;
        bp: bigint;
        as: bigint;
        ds: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    xpReward: {
      params: CallContractParams<{ level: bigint }>;
      result: CallContractResult<bigint>;
    };
    checkTurn: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    whichPaca: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<PacaFlip>;
    };
    acceptBattle: {
      params: CallContractParams<{ who: Address; alphpaca: HexString }>;
      result: CallContractResult<null>;
    };
    attack: {
      params: CallContractParams<{ who: Address; move: HexString }>;
      result: CallContractResult<null>;
    };
    forfeit: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    random: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    damageFormula: {
      params: SignExecuteContractMethodParams<{
        level: bigint;
        bp: bigint;
        as: bigint;
        ds: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    xpReward: {
      params: SignExecuteContractMethodParams<{ level: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    checkTurn: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    whichPaca: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    acceptBattle: {
      params: SignExecuteContractMethodParams<{
        who: Address;
        alphpaca: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    attack: {
      params: SignExecuteContractMethodParams<{
        who: Address;
        move: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    forfeit: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PvpBattleInstance,
  PvpBattleTypes.Fields
> {
  encodeFields(fields: PvpBattleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = {
    Codes: {
      PvpNotActive: BigInt("0"),
      NotYourTurn: BigInt("1"),
      BattleFinished: BigInt("2"),
      TimeLimitExceeded: BigInt("3"),
    },
  };

  at(address: string): PvpBattleInstance {
    return new PvpBattleInstance(address);
  }

  tests = {
    random: async (
      params: Omit<
        TestContractParamsWithoutMaps<PvpBattleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "random", params, getContractByCodeHash);
    },
    damageFormula: async (
      params: TestContractParamsWithoutMaps<
        PvpBattleTypes.Fields,
        { level: bigint; bp: bigint; as: bigint; ds: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "damageFormula", params, getContractByCodeHash);
    },
    xpReward: async (
      params: TestContractParamsWithoutMaps<
        PvpBattleTypes.Fields,
        { level: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "xpReward", params, getContractByCodeHash);
    },
    checkTurn: async (
      params: TestContractParamsWithoutMaps<
        PvpBattleTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "checkTurn", params, getContractByCodeHash);
    },
    whichPaca: async (
      params: Omit<
        TestContractParamsWithoutMaps<PvpBattleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<PacaFlip>> => {
      return testMethod(this, "whichPaca", params, getContractByCodeHash);
    },
    acceptBattle: async (
      params: TestContractParamsWithoutMaps<
        PvpBattleTypes.Fields,
        { who: Address; alphpaca: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "acceptBattle", params, getContractByCodeHash);
    },
    attack: async (
      params: TestContractParamsWithoutMaps<
        PvpBattleTypes.Fields,
        { who: Address; move: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "attack", params, getContractByCodeHash);
    },
    forfeit: async (
      params: Omit<
        TestContractParamsWithoutMaps<PvpBattleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "forfeit", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PvpBattleTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PvpBattle = new Factory(
  Contract.fromJson(
    PvpBattleContractJson,
    "",
    "426c23bf1ebe22fc8290019a58db5ba2975632dd344d8d0fe9fbfbad74dd78ab",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class PvpBattleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PvpBattleTypes.State> {
    return fetchContractState(PvpBattle, this);
  }

  view = {
    random: async (
      params?: PvpBattleTypes.CallMethodParams<"random">
    ): Promise<PvpBattleTypes.CallMethodResult<"random">> => {
      return callMethod(
        PvpBattle,
        this,
        "random",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    damageFormula: async (
      params: PvpBattleTypes.CallMethodParams<"damageFormula">
    ): Promise<PvpBattleTypes.CallMethodResult<"damageFormula">> => {
      return callMethod(
        PvpBattle,
        this,
        "damageFormula",
        params,
        getContractByCodeHash
      );
    },
    xpReward: async (
      params: PvpBattleTypes.CallMethodParams<"xpReward">
    ): Promise<PvpBattleTypes.CallMethodResult<"xpReward">> => {
      return callMethod(
        PvpBattle,
        this,
        "xpReward",
        params,
        getContractByCodeHash
      );
    },
    checkTurn: async (
      params: PvpBattleTypes.CallMethodParams<"checkTurn">
    ): Promise<PvpBattleTypes.CallMethodResult<"checkTurn">> => {
      return callMethod(
        PvpBattle,
        this,
        "checkTurn",
        params,
        getContractByCodeHash
      );
    },
    whichPaca: async (
      params?: PvpBattleTypes.CallMethodParams<"whichPaca">
    ): Promise<PvpBattleTypes.CallMethodResult<"whichPaca">> => {
      return callMethod(
        PvpBattle,
        this,
        "whichPaca",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    acceptBattle: async (
      params: PvpBattleTypes.CallMethodParams<"acceptBattle">
    ): Promise<PvpBattleTypes.CallMethodResult<"acceptBattle">> => {
      return callMethod(
        PvpBattle,
        this,
        "acceptBattle",
        params,
        getContractByCodeHash
      );
    },
    attack: async (
      params: PvpBattleTypes.CallMethodParams<"attack">
    ): Promise<PvpBattleTypes.CallMethodResult<"attack">> => {
      return callMethod(
        PvpBattle,
        this,
        "attack",
        params,
        getContractByCodeHash
      );
    },
    forfeit: async (
      params?: PvpBattleTypes.CallMethodParams<"forfeit">
    ): Promise<PvpBattleTypes.CallMethodResult<"forfeit">> => {
      return callMethod(
        PvpBattle,
        this,
        "forfeit",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    random: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"random">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"random">> => {
      return signExecuteMethod(PvpBattle, this, "random", params);
    },
    damageFormula: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"damageFormula">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"damageFormula">> => {
      return signExecuteMethod(PvpBattle, this, "damageFormula", params);
    },
    xpReward: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"xpReward">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"xpReward">> => {
      return signExecuteMethod(PvpBattle, this, "xpReward", params);
    },
    checkTurn: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"checkTurn">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"checkTurn">> => {
      return signExecuteMethod(PvpBattle, this, "checkTurn", params);
    },
    whichPaca: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"whichPaca">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"whichPaca">> => {
      return signExecuteMethod(PvpBattle, this, "whichPaca", params);
    },
    acceptBattle: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"acceptBattle">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"acceptBattle">> => {
      return signExecuteMethod(PvpBattle, this, "acceptBattle", params);
    },
    attack: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"attack">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"attack">> => {
      return signExecuteMethod(PvpBattle, this, "attack", params);
    },
    forfeit: async (
      params: PvpBattleTypes.SignExecuteMethodParams<"forfeit">
    ): Promise<PvpBattleTypes.SignExecuteMethodResult<"forfeit">> => {
      return signExecuteMethod(PvpBattle, this, "forfeit", params);
    },
  };

  async multicall<Callss extends PvpBattleTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<PvpBattleTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      PvpBattle,
      this,
      callss,
      getContractByCodeHash
    )) as PvpBattleTypes.MulticallReturnType<Callss>;
  }
}

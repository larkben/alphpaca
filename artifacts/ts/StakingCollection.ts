/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as StakingCollectionContractJson } from "../staking/StakingCollection.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace StakingCollectionTypes {
  export type Fields = {
    collectionUri: HexString;
    totalSupply: bigint;
    collectionOwner: Address;
    token: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
    editCollectionUri: {
      params: CallContractParams<{ newUri: HexString }>;
      result: CallContractResult<null>;
    };
    editCollectionOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
    stakeToken: {
      params: CallContractParams<{ tokenAmount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionUri: {
      params: SignExecuteContractMethodParams<{ newUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    stakeToken: {
      params: SignExecuteContractMethodParams<{ tokenAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  StakingCollectionInstance,
  StakingCollectionTypes.Fields
> {
  encodeFields(fields: StakingCollectionTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as StakingCollectionTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      NFTNotFound: BigInt(1),
      NFTNotPartOfCollection: BigInt(2),
      CollectionOwnerOnly: BigInt(3),
    },
  };

  at(address: string): StakingCollectionInstance {
    return new StakingCollectionInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        StakingCollectionTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        StakingCollectionTypes.Fields,
        { nftId: HexString; nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    editCollectionUri: async (
      params: TestContractParamsWithoutMaps<
        StakingCollectionTypes.Fields,
        { newUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    editCollectionOwner: async (
      params: TestContractParamsWithoutMaps<
        StakingCollectionTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionOwner",
        params,
        getContractByCodeHash
      );
    },
    stakeToken: async (
      params: TestContractParamsWithoutMaps<
        StakingCollectionTypes.Fields,
        { tokenAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "stakeToken", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const StakingCollection = new Factory(
  Contract.fromJson(
    StakingCollectionContractJson,
    "",
    "50d16d8428e8e2875b95907fcc847faad14c2786fbcdd625c5e8ed28a85007b1",
    []
  )
);

// Use this class to interact with the blockchain
export class StakingCollectionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingCollectionTypes.State> {
    return fetchContractState(StakingCollection, this);
  }

  methods = {
    getCollectionUri: async (
      params?: StakingCollectionTypes.CallMethodParams<"getCollectionUri">
    ): Promise<StakingCollectionTypes.CallMethodResult<"getCollectionUri">> => {
      return callMethod(
        StakingCollection,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: StakingCollectionTypes.CallMethodParams<"totalSupply">
    ): Promise<StakingCollectionTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        StakingCollection,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: StakingCollectionTypes.CallMethodParams<"nftByIndex">
    ): Promise<StakingCollectionTypes.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        StakingCollection,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: StakingCollectionTypes.CallMethodParams<"validateNFT">
    ): Promise<StakingCollectionTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        StakingCollection,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    editCollectionUri: async (
      params: StakingCollectionTypes.CallMethodParams<"editCollectionUri">
    ): Promise<
      StakingCollectionTypes.CallMethodResult<"editCollectionUri">
    > => {
      return callMethod(
        StakingCollection,
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    editCollectionOwner: async (
      params: StakingCollectionTypes.CallMethodParams<"editCollectionOwner">
    ): Promise<
      StakingCollectionTypes.CallMethodResult<"editCollectionOwner">
    > => {
      return callMethod(
        StakingCollection,
        this,
        "editCollectionOwner",
        params,
        getContractByCodeHash
      );
    },
    stakeToken: async (
      params: StakingCollectionTypes.CallMethodParams<"stakeToken">
    ): Promise<StakingCollectionTypes.CallMethodResult<"stakeToken">> => {
      return callMethod(
        StakingCollection,
        this,
        "stakeToken",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getCollectionUri: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"getCollectionUri">
    > => {
      return signExecuteMethod(
        StakingCollection,
        this,
        "getCollectionUri",
        params
      );
    },
    totalSupply: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"totalSupply">
    > => {
      return signExecuteMethod(StakingCollection, this, "totalSupply", params);
    },
    nftByIndex: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"nftByIndex">
    > => {
      return signExecuteMethod(StakingCollection, this, "nftByIndex", params);
    },
    validateNFT: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"validateNFT">
    > => {
      return signExecuteMethod(StakingCollection, this, "validateNFT", params);
    },
    editCollectionUri: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"editCollectionUri">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"editCollectionUri">
    > => {
      return signExecuteMethod(
        StakingCollection,
        this,
        "editCollectionUri",
        params
      );
    },
    editCollectionOwner: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"editCollectionOwner">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"editCollectionOwner">
    > => {
      return signExecuteMethod(
        StakingCollection,
        this,
        "editCollectionOwner",
        params
      );
    },
    stakeToken: async (
      params: StakingCollectionTypes.SignExecuteMethodParams<"stakeToken">
    ): Promise<
      StakingCollectionTypes.SignExecuteMethodResult<"stakeToken">
    > => {
      return signExecuteMethod(StakingCollection, this, "stakeToken", params);
    },
  };

  async multicall<Calls extends StakingCollectionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakingCollectionTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      StakingCollection,
      this,
      calls,
      getContractByCodeHash
    )) as StakingCollectionTypes.MultiCallResults<Calls>;
  }
}

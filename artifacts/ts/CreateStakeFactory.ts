/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as CreateStakeFactoryContractJson } from "../staking/CreateStakeFactory.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace CreateStakeFactoryTypes {
  export type Fields = {
    owner: Address;
    alphfee: bigint;
    collectedfees: bigint;
    stakefactory: HexString;
    stakecontract: HexString;
    path: bigint;
  };

  export type State = ContractState<Fields>;

  export type NewProjectEvent = ContractEvent<{ projectid: HexString }>;

  export interface CallMethodTable {
    getFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  CreateStakeFactoryInstance,
  CreateStakeFactoryTypes.Fields
> {
  encodeFields(fields: CreateStakeFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as CreateStakeFactoryTypes.Fields;
  }

  eventIndex = { NewProject: 0 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(0) } };

  at(address: string): CreateStakeFactoryInstance {
    return new CreateStakeFactoryInstance(address);
  }

  tests = {
    getFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<CreateStakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getFee", params);
    },
    addproject: async (
      params: TestContractParamsWithoutMaps<
        CreateStakeFactoryTypes.Fields,
        { token: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addproject", params);
    },
    collectfees: async (
      params: Omit<
        TestContractParamsWithoutMaps<CreateStakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "collectfees", params);
    },
    destroystakeprotocol: async (
      params: Omit<
        TestContractParamsWithoutMaps<CreateStakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroystakeprotocol", params);
    },
  };
}

// Use this object to test and deploy the contract
export const CreateStakeFactory = new Factory(
  Contract.fromJson(
    CreateStakeFactoryContractJson,
    "",
    "faee87efd3939de62184e3f13706d3b7ce65f1c8b9acfd7364ec43967b08011c",
    []
  )
);

// Use this class to interact with the blockchain
export class CreateStakeFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<CreateStakeFactoryTypes.State> {
    return fetchContractState(CreateStakeFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewProjectEvent(
    options: EventSubscribeOptions<CreateStakeFactoryTypes.NewProjectEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      CreateStakeFactory.contract,
      this,
      options,
      "NewProject",
      fromCount
    );
  }

  methods = {
    getFee: async (
      params?: CreateStakeFactoryTypes.CallMethodParams<"getFee">
    ): Promise<CreateStakeFactoryTypes.CallMethodResult<"getFee">> => {
      return callMethod(
        CreateStakeFactory,
        this,
        "getFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends CreateStakeFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CreateStakeFactoryTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      CreateStakeFactory,
      this,
      calls,
      getContractByCodeHash
    )) as CreateStakeFactoryTypes.MultiCallResults<Calls>;
  }
}

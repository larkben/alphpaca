/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TestOracleContractJson } from "../test/TestOracle.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  PairInfo,
  PlayerData,
  TokenData,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace TestOracleTypes {
  export type Fields = {
    currentTime: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getValue: {
      params: CallContractParams<{ pair: HexString }>;
      result: CallContractResult<TokenData>;
    };
    updateValue: {
      params: CallContractParams<{ pair: HexString; newValue: bigint }>;
      result: CallContractResult<null>;
    };
    addPair: {
      params: CallContractParams<{ pair: HexString }>;
      result: CallContractResult<null>;
    };
    updateTime: {
      params: CallContractParams<{ newTime: bigint }>;
      result: CallContractResult<null>;
    };
    getTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getValue: {
      params: SignExecuteContractMethodParams<{ pair: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateValue: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        newValue: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addPair: {
      params: SignExecuteContractMethodParams<{ pair: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateTime: {
      params: SignExecuteContractMethodParams<{ newTime: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getTime: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { prices?: Map<HexString, TokenData> };
}

class Factory extends ContractFactory<
  TestOracleInstance,
  TestOracleTypes.Fields
> {
  encodeFields(fields: TestOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): TestOracleInstance {
    return new TestOracleInstance(address);
  }

  tests = {
    getValue: async (
      params: TestContractParams<
        TestOracleTypes.Fields,
        { pair: HexString },
        TestOracleTypes.Maps
      >
    ): Promise<TestContractResult<TokenData, TestOracleTypes.Maps>> => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
    updateValue: async (
      params: TestContractParams<
        TestOracleTypes.Fields,
        { pair: HexString; newValue: bigint },
        TestOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, TestOracleTypes.Maps>> => {
      return testMethod(this, "updateValue", params, getContractByCodeHash);
    },
    addPair: async (
      params: TestContractParams<
        TestOracleTypes.Fields,
        { pair: HexString },
        TestOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, TestOracleTypes.Maps>> => {
      return testMethod(this, "addPair", params, getContractByCodeHash);
    },
    updateTime: async (
      params: TestContractParams<
        TestOracleTypes.Fields,
        { newTime: bigint },
        TestOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, TestOracleTypes.Maps>> => {
      return testMethod(this, "updateTime", params, getContractByCodeHash);
    },
    getTime: async (
      params: Omit<
        TestContractParams<TestOracleTypes.Fields, never, TestOracleTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, TestOracleTypes.Maps>> => {
      return testMethod(this, "getTime", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TestOracleTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: TestOracleTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const TestOracle = new Factory(
  Contract.fromJson(
    TestOracleContractJson,
    "=14-1=1+5=2-2+d4=2-2+e2=237-1+7=94+7a7e0214696e73657274206174206d617020706174683a2000=70",
    "f4957e8b769de17da8ef05402222e14104feb02e21b0d3ee70089c6ceab9bff6",
    AllStructs
  )
);
registerContract(TestOracle);

// Use this class to interact with the blockchain
export class TestOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    prices: new RalphMap<HexString, TokenData>(
      TestOracle.contract,
      this.contractId,
      "prices"
    ),
  };

  async fetchState(): Promise<TestOracleTypes.State> {
    return fetchContractState(TestOracle, this);
  }

  view = {
    getValue: async (
      params: TestOracleTypes.CallMethodParams<"getValue">
    ): Promise<TestOracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        TestOracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
    updateValue: async (
      params: TestOracleTypes.CallMethodParams<"updateValue">
    ): Promise<TestOracleTypes.CallMethodResult<"updateValue">> => {
      return callMethod(
        TestOracle,
        this,
        "updateValue",
        params,
        getContractByCodeHash
      );
    },
    addPair: async (
      params: TestOracleTypes.CallMethodParams<"addPair">
    ): Promise<TestOracleTypes.CallMethodResult<"addPair">> => {
      return callMethod(
        TestOracle,
        this,
        "addPair",
        params,
        getContractByCodeHash
      );
    },
    updateTime: async (
      params: TestOracleTypes.CallMethodParams<"updateTime">
    ): Promise<TestOracleTypes.CallMethodResult<"updateTime">> => {
      return callMethod(
        TestOracle,
        this,
        "updateTime",
        params,
        getContractByCodeHash
      );
    },
    getTime: async (
      params?: TestOracleTypes.CallMethodParams<"getTime">
    ): Promise<TestOracleTypes.CallMethodResult<"getTime">> => {
      return callMethod(
        TestOracle,
        this,
        "getTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getValue: async (
      params: TestOracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(TestOracle, this, "getValue", params);
    },
    updateValue: async (
      params: TestOracleTypes.SignExecuteMethodParams<"updateValue">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"updateValue">> => {
      return signExecuteMethod(TestOracle, this, "updateValue", params);
    },
    addPair: async (
      params: TestOracleTypes.SignExecuteMethodParams<"addPair">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"addPair">> => {
      return signExecuteMethod(TestOracle, this, "addPair", params);
    },
    updateTime: async (
      params: TestOracleTypes.SignExecuteMethodParams<"updateTime">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"updateTime">> => {
      return signExecuteMethod(TestOracle, this, "updateTime", params);
    },
    getTime: async (
      params: TestOracleTypes.SignExecuteMethodParams<"getTime">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"getTime">> => {
      return signExecuteMethod(TestOracle, this, "getTime", params);
    },
  };

  async multicall<Calls extends TestOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TestOracleTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TestOracleTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TestOracleTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TestOracleTypes.MultiCallParams
      | TestOracleTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TestOracle,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as NFTPublicSaleCollectionRandomWithRoyaltyContractJson } from "../nfts/publicsale/random/NFTPublicSaleCollectionRandomWithRoyalty.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, PlayerData, AllStructs } from "./types";

// Custom types for the contract
export namespace NFTPublicSaleCollectionRandomWithRoyaltyTypes {
  export type Fields = {
    nftTemplateId: HexString;
    nftMutableTemplateId: HexString;
    collectionUri: HexString;
    nftBaseUri: HexString;
    collectionOwner: Address;
    maxSupply: bigint;
    mintPrice: bigint;
    mintToken: HexString;
    maxBatchMintSize: bigint;
    royaltyRate: bigint;
    totalSupply: bigint;
    ownerOnly: boolean;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{ minter: Address; index: bigint }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
    royaltyAmount: {
      params: CallContractParams<{ tokenId: HexString; salePrice: bigint }>;
      result: CallContractResult<bigint>;
    };
    payRoyalty: {
      params: CallContractParams<{ payer: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawRoyalty: {
      params: CallContractParams<{ to: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    editCollectionUri: {
      params: CallContractParams<{ newUri: HexString }>;
      result: CallContractResult<null>;
    };
    editMintPrice: {
      params: CallContractParams<{ newPrice: bigint }>;
      result: CallContractResult<null>;
    };
    editMintToken: {
      params: CallContractParams<{ newToken: HexString }>;
      result: CallContractResult<null>;
    };
    editBatchSize: {
      params: CallContractParams<{ newSize: bigint }>;
      result: CallContractResult<null>;
    };
    editCollectionOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
    editMintStatus: {
      params: CallContractParams<{ newStatus: boolean }>;
      result: CallContractResult<null>;
    };
    mint: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    getCollectionOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getMaxSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    upgradeNFTCollection: {
      params: CallContractParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ to: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawToken: {
      params: CallContractParams<{
        to: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    getNFTUri: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    getMintPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    editRoyaltyRate: {
      params: CallContractParams<{ newRate: bigint }>;
      result: CallContractResult<null>;
    };
    payRoyaltyNonNative: {
      params: CallContractParams<{
        payer: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    withdrawNonNativeRoyalty: {
      params: CallContractParams<{
        to: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    royaltyAmount: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        salePrice: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    payRoyalty: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawRoyalty: {
      params: SignExecuteContractMethodParams<{ to: Address; amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionUri: {
      params: SignExecuteContractMethodParams<{ newUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editMintPrice: {
      params: SignExecuteContractMethodParams<{ newPrice: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    editMintToken: {
      params: SignExecuteContractMethodParams<{ newToken: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editBatchSize: {
      params: SignExecuteContractMethodParams<{ newSize: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    editMintStatus: {
      params: SignExecuteContractMethodParams<{ newStatus: boolean }>;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getCollectionOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMaxSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    upgradeNFTCollection: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{ to: Address; amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawToken: {
      params: SignExecuteContractMethodParams<{
        to: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getNFTUri: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getMintPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    editRoyaltyRate: {
      params: SignExecuteContractMethodParams<{ newRate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    payRoyaltyNonNative: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawNonNativeRoyalty: {
      params: SignExecuteContractMethodParams<{
        to: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  NFTPublicSaleCollectionRandomWithRoyaltyInstance,
  NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields
> {
  encodeFields(fields: NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Mint: 0 };
  consts = {
    PublicSaleErrorCodes: { IncorrectTokenIndex: BigInt("0") },
    ErrorCodes: {
      IncorrectTokenIndex: BigInt("2"),
      AdminOnly: BigInt("3"),
      NFTNotFound: BigInt("0"),
      CollectionOwnerAllowedOnly: BigInt("1"),
      NFTNotPartOfCollection: BigInt("2"),
      RoyaltyRateTooHigh: BigInt("0"),
    },
  };

  at(address: string): NFTPublicSaleCollectionRandomWithRoyaltyInstance {
    return new NFTPublicSaleCollectionRandomWithRoyaltyInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { nftId: HexString; nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    royaltyAmount: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { tokenId: HexString; salePrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "royaltyAmount", params, getContractByCodeHash);
    },
    payRoyalty: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { payer: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "payRoyalty", params, getContractByCodeHash);
    },
    withdrawRoyalty: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { to: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawRoyalty", params, getContractByCodeHash);
    },
    editCollectionUri: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    editMintPrice: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newPrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editMintPrice", params, getContractByCodeHash);
    },
    editMintToken: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newToken: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editMintToken", params, getContractByCodeHash);
    },
    editBatchSize: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newSize: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editBatchSize", params, getContractByCodeHash);
    },
    editCollectionOwner: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionOwner",
        params,
        getContractByCodeHash
      );
    },
    editMintStatus: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newStatus: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editMintStatus", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    getCollectionOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(
        this,
        "getCollectionOwner",
        params,
        getContractByCodeHash
      );
    },
    getMaxSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMaxSupply", params, getContractByCodeHash);
    },
    upgradeNFTCollection: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "upgradeNFTCollection",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { to: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    withdrawToken: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { to: Address; token: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawToken", params, getContractByCodeHash);
    },
    getNFTUri: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNFTUri", params, getContractByCodeHash);
    },
    getMintPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMintPrice", params, getContractByCodeHash);
    },
    editRoyaltyRate: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { newRate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editRoyaltyRate", params, getContractByCodeHash);
    },
    payRoyaltyNonNative: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { payer: Address; token: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "payRoyaltyNonNative",
        params,
        getContractByCodeHash
      );
    },
    withdrawNonNativeRoyalty: async (
      params: TestContractParamsWithoutMaps<
        NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
        { to: Address; token: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "withdrawNonNativeRoyalty",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: NFTPublicSaleCollectionRandomWithRoyaltyTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const NFTPublicSaleCollectionRandomWithRoyalty = new Factory(
  Contract.fromJson(
    NFTPublicSaleCollectionRandomWithRoyaltyContractJson,
    "",
    "ac3f0ec963ba9ca525a348e343de33c02bf8e7003f0321de8873ce7b871a0514",
    AllStructs
  )
);
registerContract(NFTPublicSaleCollectionRandomWithRoyalty);

// Use this class to interact with the blockchain
export class NFTPublicSaleCollectionRandomWithRoyaltyInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTPublicSaleCollectionRandomWithRoyaltyTypes.State> {
    return fetchContractState(NFTPublicSaleCollectionRandomWithRoyalty, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: EventSubscribeOptions<NFTPublicSaleCollectionRandomWithRoyaltyTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTPublicSaleCollectionRandomWithRoyalty.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  view = {
    getCollectionUri: async (
      params?: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"getCollectionUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"getCollectionUri">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"totalSupply">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"totalSupply">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"nftByIndex">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"nftByIndex">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"validateNFT">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"validateNFT">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    royaltyAmount: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"royaltyAmount">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"royaltyAmount">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "royaltyAmount",
        params,
        getContractByCodeHash
      );
    },
    payRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"payRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"payRoyalty">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "payRoyalty",
        params,
        getContractByCodeHash
      );
    },
    withdrawRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"withdrawRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"withdrawRoyalty">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawRoyalty",
        params,
        getContractByCodeHash
      );
    },
    editCollectionUri: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editCollectionUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editCollectionUri">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    editMintPrice: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editMintPrice">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editMintPrice">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintPrice",
        params,
        getContractByCodeHash
      );
    },
    editMintToken: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editMintToken">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editMintToken">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintToken",
        params,
        getContractByCodeHash
      );
    },
    editBatchSize: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editBatchSize">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editBatchSize">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editBatchSize",
        params,
        getContractByCodeHash
      );
    },
    editCollectionOwner: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editCollectionOwner">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editCollectionOwner">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editCollectionOwner",
        params,
        getContractByCodeHash
      );
    },
    editMintStatus: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editMintStatus">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editMintStatus">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintStatus",
        params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"mint">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"mint">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "mint",
        params,
        getContractByCodeHash
      );
    },
    getCollectionOwner: async (
      params?: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"getCollectionOwner">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"getCollectionOwner">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getCollectionOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMaxSupply: async (
      params?: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"getMaxSupply">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"getMaxSupply">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getMaxSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    upgradeNFTCollection: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"upgradeNFTCollection">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"upgradeNFTCollection">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "upgradeNFTCollection",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"withdraw">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"withdraw">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    withdrawToken: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"withdrawToken">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"withdrawToken">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawToken",
        params,
        getContractByCodeHash
      );
    },
    getNFTUri: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"getNFTUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"getNFTUri">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getNFTUri",
        params,
        getContractByCodeHash
      );
    },
    getMintPrice: async (
      params?: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"getMintPrice">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"getMintPrice">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getMintPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    editRoyaltyRate: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"editRoyaltyRate">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"editRoyaltyRate">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editRoyaltyRate",
        params,
        getContractByCodeHash
      );
    },
    payRoyaltyNonNative: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"payRoyaltyNonNative">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"payRoyaltyNonNative">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "payRoyaltyNonNative",
        params,
        getContractByCodeHash
      );
    },
    withdrawNonNativeRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodParams<"withdrawNonNativeRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.CallMethodResult<"withdrawNonNativeRoyalty">
    > => {
      return callMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawNonNativeRoyalty",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCollectionUri: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"getCollectionUri">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getCollectionUri",
        params
      );
    },
    totalSupply: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"totalSupply">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "totalSupply",
        params
      );
    },
    nftByIndex: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"nftByIndex">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "nftByIndex",
        params
      );
    },
    validateNFT: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"validateNFT">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "validateNFT",
        params
      );
    },
    royaltyAmount: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"royaltyAmount">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"royaltyAmount">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "royaltyAmount",
        params
      );
    },
    payRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"payRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"payRoyalty">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "payRoyalty",
        params
      );
    },
    withdrawRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"withdrawRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"withdrawRoyalty">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawRoyalty",
        params
      );
    },
    editCollectionUri: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editCollectionUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editCollectionUri">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editCollectionUri",
        params
      );
    },
    editMintPrice: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editMintPrice">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editMintPrice">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintPrice",
        params
      );
    },
    editMintToken: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editMintToken">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editMintToken">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintToken",
        params
      );
    },
    editBatchSize: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editBatchSize">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editBatchSize">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editBatchSize",
        params
      );
    },
    editCollectionOwner: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editCollectionOwner">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editCollectionOwner">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editCollectionOwner",
        params
      );
    },
    editMintStatus: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editMintStatus">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editMintStatus">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editMintStatus",
        params
      );
    },
    mint: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"mint">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"mint">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "mint",
        params
      );
    },
    getCollectionOwner: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"getCollectionOwner">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"getCollectionOwner">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getCollectionOwner",
        params
      );
    },
    getMaxSupply: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"getMaxSupply">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"getMaxSupply">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getMaxSupply",
        params
      );
    },
    upgradeNFTCollection: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"upgradeNFTCollection">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"upgradeNFTCollection">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "upgradeNFTCollection",
        params
      );
    },
    withdraw: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"withdraw">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdraw",
        params
      );
    },
    withdrawToken: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"withdrawToken">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"withdrawToken">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawToken",
        params
      );
    },
    getNFTUri: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"getNFTUri">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"getNFTUri">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getNFTUri",
        params
      );
    },
    getMintPrice: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"getMintPrice">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"getMintPrice">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "getMintPrice",
        params
      );
    },
    editRoyaltyRate: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"editRoyaltyRate">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"editRoyaltyRate">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "editRoyaltyRate",
        params
      );
    },
    payRoyaltyNonNative: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"payRoyaltyNonNative">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"payRoyaltyNonNative">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "payRoyaltyNonNative",
        params
      );
    },
    withdrawNonNativeRoyalty: async (
      params: NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodParams<"withdrawNonNativeRoyalty">
    ): Promise<
      NFTPublicSaleCollectionRandomWithRoyaltyTypes.SignExecuteMethodResult<"withdrawNonNativeRoyalty">
    > => {
      return signExecuteMethod(
        NFTPublicSaleCollectionRandomWithRoyalty,
        this,
        "withdrawNonNativeRoyalty",
        params
      );
    },
  };

  async multicall<
    Calls extends NFTPublicSaleCollectionRandomWithRoyaltyTypes.MultiCallParams
  >(
    calls: Calls
  ): Promise<
    NFTPublicSaleCollectionRandomWithRoyaltyTypes.MultiCallResults<Calls>
  >;
  async multicall<
    Callss extends NFTPublicSaleCollectionRandomWithRoyaltyTypes.MultiCallParams[]
  >(
    callss: Narrow<Callss>
  ): Promise<
    NFTPublicSaleCollectionRandomWithRoyaltyTypes.MulticallReturnType<Callss>
  >;
  async multicall<
    Callss extends
      | NFTPublicSaleCollectionRandomWithRoyaltyTypes.MultiCallParams
      | NFTPublicSaleCollectionRandomWithRoyaltyTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      NFTPublicSaleCollectionRandomWithRoyalty,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

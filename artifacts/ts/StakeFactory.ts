/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as StakeFactoryContractJson } from "../staking/StakeFactory.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace StakeFactoryTypes {
  export type Fields = {
    owner: Address;
    dev: Address;
    token: HexString;
    total: bigint;
    users: bigint;
    path: bigint;
    monthlyrewards: bigint;
    stakecontract: HexString;
  };

  export type State = ContractState<Fields>;

  export type StakeDecreasedEvent = ContractEvent<{
    who: Address;
    amount: bigint;
    contractaddy: Address;
  }>;
  export type StakeIncreasedEvent = ContractEvent<{
    who: Address;
    amount: bigint;
    contractaddy: Address;
  }>;

  export interface CallMethodTable {
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getTotal: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getUsers: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPath: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    doesStakeExist: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<[bigint, boolean]>;
    };
    calculaterewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  StakeFactoryInstance,
  StakeFactoryTypes.Fields
> {
  encodeFields(fields: StakeFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as StakeFactoryTypes.Fields;
  }

  eventIndex = { StakeDecreased: 0, StakeIncreased: 1 };
  consts = {
    ErrorCodes: { InvalidCaller: BigInt(0), ContractNotExist: BigInt(1) },
  };

  at(address: string): StakeFactoryInstance {
    return new StakeFactoryInstance(address);
  }

  tests = {
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getToken", params);
    },
    getTotal: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotal", params);
    },
    getUsers: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUsers", params);
    },
    getPath: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPath", params);
    },
    doesStakeExist: async (
      params: TestContractParamsWithoutMaps<
        StakeFactoryTypes.Fields,
        { staker: Address }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, boolean]>> => {
      return testMethod(this, "doesStakeExist", params);
    },
    addstake: async (
      params: TestContractParamsWithoutMaps<
        StakeFactoryTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addstake", params);
    },
    withdrawstake: async (
      params: TestContractParamsWithoutMaps<
        StakeFactoryTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawstake", params);
    },
    calculaterewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "calculaterewards", params);
    },
    distributerewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakeFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "distributerewards", params);
    },
    editrewards: async (
      params: TestContractParamsWithoutMaps<
        StakeFactoryTypes.Fields,
        { newreward: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editrewards", params);
    },
  };
}

// Use this object to test and deploy the contract
export const StakeFactory = new Factory(
  Contract.fromJson(
    StakeFactoryContractJson,
    "",
    "c718571d54c17c01664658866bbbb0f7379c31523a86d5a6356a862f8c67420c",
    []
  )
);

// Use this class to interact with the blockchain
export class StakeFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakeFactoryTypes.State> {
    return fetchContractState(StakeFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeStakeDecreasedEvent(
    options: EventSubscribeOptions<StakeFactoryTypes.StakeDecreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StakeFactory.contract,
      this,
      options,
      "StakeDecreased",
      fromCount
    );
  }

  subscribeStakeIncreasedEvent(
    options: EventSubscribeOptions<StakeFactoryTypes.StakeIncreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StakeFactory.contract,
      this,
      options,
      "StakeIncreased",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | StakeFactoryTypes.StakeDecreasedEvent
      | StakeFactoryTypes.StakeIncreasedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      StakeFactory.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getOwner: async (
      params?: StakeFactoryTypes.CallMethodParams<"getOwner">
    ): Promise<StakeFactoryTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        StakeFactory,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getToken: async (
      params?: StakeFactoryTypes.CallMethodParams<"getToken">
    ): Promise<StakeFactoryTypes.CallMethodResult<"getToken">> => {
      return callMethod(
        StakeFactory,
        this,
        "getToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotal: async (
      params?: StakeFactoryTypes.CallMethodParams<"getTotal">
    ): Promise<StakeFactoryTypes.CallMethodResult<"getTotal">> => {
      return callMethod(
        StakeFactory,
        this,
        "getTotal",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUsers: async (
      params?: StakeFactoryTypes.CallMethodParams<"getUsers">
    ): Promise<StakeFactoryTypes.CallMethodResult<"getUsers">> => {
      return callMethod(
        StakeFactory,
        this,
        "getUsers",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPath: async (
      params?: StakeFactoryTypes.CallMethodParams<"getPath">
    ): Promise<StakeFactoryTypes.CallMethodResult<"getPath">> => {
      return callMethod(
        StakeFactory,
        this,
        "getPath",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    doesStakeExist: async (
      params: StakeFactoryTypes.CallMethodParams<"doesStakeExist">
    ): Promise<StakeFactoryTypes.CallMethodResult<"doesStakeExist">> => {
      return callMethod(
        StakeFactory,
        this,
        "doesStakeExist",
        params,
        getContractByCodeHash
      );
    },
    calculaterewards: async (
      params?: StakeFactoryTypes.CallMethodParams<"calculaterewards">
    ): Promise<StakeFactoryTypes.CallMethodResult<"calculaterewards">> => {
      return callMethod(
        StakeFactory,
        this,
        "calculaterewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends StakeFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakeFactoryTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      StakeFactory,
      this,
      calls,
      getContractByCodeHash
    )) as StakeFactoryTypes.MultiCallResults<Calls>;
  }
}

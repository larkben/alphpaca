/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as MarketplaceContractJson } from "../marketplace/Marketplace.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MarketplaceTypes {
  export type Fields = {
    owner: Address;
    fee: bigint;
    listingTemplateId: HexString;
    storagefee: bigint;
  };

  export type State = ContractState<Fields>;

  export type NewListingEvent = ContractEvent<{
    type: HexString;
    contract: HexString;
    contractpath: bigint;
    token: HexString;
    tokenAmount: bigint;
    priceToken: HexString;
    price: bigint;
    exp: bigint;
  }>;
  export type ListingRemovedEvent = ContractEvent<{
    type: HexString;
    who: Address;
    contractpath: bigint;
  }>;
  export type ListingEditedEvent = ContractEvent<{
    type: HexString;
    who: Address;
    contractpath: bigint;
    price: bigint;
  }>;

  export interface CallMethodTable {
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getListingFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getStorageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  MarketplaceInstance,
  MarketplaceTypes.Fields
> {
  encodeFields(fields: MarketplaceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as MarketplaceTypes.Fields;
  }

  eventIndex = { NewListing: 0, ListingRemoved: 1, ListingEdited: 2 };
  consts = { ErrorCodes: { NotOwner: BigInt(0) } };

  at(address: string): MarketplaceInstance {
    return new MarketplaceInstance(address);
  }

  tests = {
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getListingFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getListingFee", params);
    },
    getStorageFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getStorageFee", params);
    },
    createlisting: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        {
          token: HexString;
          tokenamount: bigint;
          price: bigint;
          priceToken: HexString;
          exp: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createlisting", params);
    },
    editlisting: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { contractpath: bigint; newprice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editlisting", params);
    },
    cancellisting: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { contractpath: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancellisting", params);
    },
    buylisting: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { contractpath: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "buylisting", params);
    },
    editlistingfees: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { newfee: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editlistingfees", params);
    },
    editstoragefees: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { newfee: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editstoragefees", params);
    },
    withdrawfees: async (
      params: TestContractParamsWithoutMaps<
        MarketplaceTypes.Fields,
        { amount: bigint; token: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawfees", params);
    },
    destroymarketplace: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroymarketplace", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Marketplace = new Factory(
  Contract.fromJson(
    MarketplaceContractJson,
    "",
    "495527a8db09b471b378f21c2ebb81a6b07ff0675a92782ff937c1190187774f",
    []
  )
);

// Use this class to interact with the blockchain
export class MarketplaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MarketplaceTypes.State> {
    return fetchContractState(Marketplace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewListingEvent(
    options: EventSubscribeOptions<MarketplaceTypes.NewListingEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Marketplace.contract,
      this,
      options,
      "NewListing",
      fromCount
    );
  }

  subscribeListingRemovedEvent(
    options: EventSubscribeOptions<MarketplaceTypes.ListingRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Marketplace.contract,
      this,
      options,
      "ListingRemoved",
      fromCount
    );
  }

  subscribeListingEditedEvent(
    options: EventSubscribeOptions<MarketplaceTypes.ListingEditedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Marketplace.contract,
      this,
      options,
      "ListingEdited",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | MarketplaceTypes.NewListingEvent
      | MarketplaceTypes.ListingRemovedEvent
      | MarketplaceTypes.ListingEditedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      Marketplace.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getOwner: async (
      params?: MarketplaceTypes.CallMethodParams<"getOwner">
    ): Promise<MarketplaceTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Marketplace,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getListingFee: async (
      params?: MarketplaceTypes.CallMethodParams<"getListingFee">
    ): Promise<MarketplaceTypes.CallMethodResult<"getListingFee">> => {
      return callMethod(
        Marketplace,
        this,
        "getListingFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getStorageFee: async (
      params?: MarketplaceTypes.CallMethodParams<"getStorageFee">
    ): Promise<MarketplaceTypes.CallMethodResult<"getStorageFee">> => {
      return callMethod(
        Marketplace,
        this,
        "getStorageFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends MarketplaceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MarketplaceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Marketplace,
      this,
      calls,
      getContractByCodeHash
    )) as MarketplaceTypes.MultiCallResults<Calls>;
  }
}

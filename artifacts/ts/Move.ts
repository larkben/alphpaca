/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as MoveContractJson } from "../gamefi/moves/Move.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, MoveReturn, PacaFlip, AllStructs } from "./types";

// Custom types for the contract
export namespace MoveTypes {
  export type Fields = {
    nftIndex: bigint;
    tokenUri: HexString;
    collectionId: HexString;
    power: bigint;
    accuracy: bigint;
    recoil: bigint;
    gain: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getNFTIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    editUri: {
      params: CallContractParams<{ newUri: HexString }>;
      result: CallContractResult<null>;
    };
    performMove: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<MoveReturn>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNFTIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    editUri: {
      params: SignExecuteContractMethodParams<{ newUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    performMove: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<MoveInstance, MoveTypes.Fields> {
  encodeFields(fields: MoveTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = { ErrorCodes: { NotCalledFromCollection: BigInt("0") } };

  at(address: string): MoveInstance {
    return new MoveInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<MoveTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<MoveTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<MoveTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getNFTIndex", params, getContractByCodeHash);
    },
    editUri: async (
      params: TestContractParamsWithoutMaps<
        MoveTypes.Fields,
        { newUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editUri", params, getContractByCodeHash);
    },
    performMove: async (
      params: Omit<
        TestContractParamsWithoutMaps<MoveTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<MoveReturn>> => {
      return testMethod(this, "performMove", params, getContractByCodeHash);
    },
  };

  stateForTest(initFields: MoveTypes.Fields, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Move = new Factory(
  Contract.fromJson(
    MoveContractJson,
    "",
    "68b49b05181edd5590bc2c7d9eb0a58325c4d49d00b556d1e8e3aaf9e8f3ba0e",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class MoveInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MoveTypes.State> {
    return fetchContractState(Move, this);
  }

  view = {
    getTokenUri: async (
      params?: MoveTypes.CallMethodParams<"getTokenUri">
    ): Promise<MoveTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        Move,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: MoveTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<MoveTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        Move,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params?: MoveTypes.CallMethodParams<"getNFTIndex">
    ): Promise<MoveTypes.CallMethodResult<"getNFTIndex">> => {
      return callMethod(
        Move,
        this,
        "getNFTIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    editUri: async (
      params: MoveTypes.CallMethodParams<"editUri">
    ): Promise<MoveTypes.CallMethodResult<"editUri">> => {
      return callMethod(Move, this, "editUri", params, getContractByCodeHash);
    },
    performMove: async (
      params?: MoveTypes.CallMethodParams<"performMove">
    ): Promise<MoveTypes.CallMethodResult<"performMove">> => {
      return callMethod(
        Move,
        this,
        "performMove",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTokenUri: async (
      params: MoveTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<MoveTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(Move, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: MoveTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<MoveTypes.SignExecuteMethodResult<"getCollectionIndex">> => {
      return signExecuteMethod(Move, this, "getCollectionIndex", params);
    },
    getNFTIndex: async (
      params: MoveTypes.SignExecuteMethodParams<"getNFTIndex">
    ): Promise<MoveTypes.SignExecuteMethodResult<"getNFTIndex">> => {
      return signExecuteMethod(Move, this, "getNFTIndex", params);
    },
    editUri: async (
      params: MoveTypes.SignExecuteMethodParams<"editUri">
    ): Promise<MoveTypes.SignExecuteMethodResult<"editUri">> => {
      return signExecuteMethod(Move, this, "editUri", params);
    },
    performMove: async (
      params: MoveTypes.SignExecuteMethodParams<"performMove">
    ): Promise<MoveTypes.SignExecuteMethodResult<"performMove">> => {
      return signExecuteMethod(Move, this, "performMove", params);
    },
  };

  async multicall<Callss extends MoveTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<MoveTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      Move,
      this,
      callss,
      getContractByCodeHash
    )) as MoveTypes.MulticallReturnType<Callss>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as RhoneBussinContractJson } from "../rhone/RhoneBussin.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RhoneBussinTypes {
  export type Fields = {
    alphInContract: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAlphInContract: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  RhoneBussinInstance,
  RhoneBussinTypes.Fields
> {
  encodeFields(fields: RhoneBussinTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as RhoneBussinTypes.Fields;
  }

  consts = {
    ErrorCodes: { InvalidCaller: BigInt(0), InvalidAmount: BigInt(1) },
  };

  at(address: string): RhoneBussinInstance {
    return new RhoneBussinInstance(address);
  }

  tests = {
    getAlphInContract: async (
      params: Omit<
        TestContractParamsWithoutMaps<RhoneBussinTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAlphInContract", params);
    },
    withdrawalph: async (
      params: TestContractParamsWithoutMaps<
        RhoneBussinTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawalph", params);
    },
    depositalph: async (
      params: TestContractParamsWithoutMaps<
        RhoneBussinTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "depositalph", params);
    },
    destroyfaucet: async (
      params: Omit<
        TestContractParamsWithoutMaps<RhoneBussinTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroyfaucet", params);
    },
  };
}

// Use this object to test and deploy the contract
export const RhoneBussin = new Factory(
  Contract.fromJson(
    RhoneBussinContractJson,
    "",
    "38fba9c4962c032098042c1eafb12cb14835345fc241d731bb19a4c04e1bd8a3",
    []
  )
);

// Use this class to interact with the blockchain
export class RhoneBussinInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RhoneBussinTypes.State> {
    return fetchContractState(RhoneBussin, this);
  }

  methods = {
    getAlphInContract: async (
      params?: RhoneBussinTypes.CallMethodParams<"getAlphInContract">
    ): Promise<RhoneBussinTypes.CallMethodResult<"getAlphInContract">> => {
      return callMethod(
        RhoneBussin,
        this,
        "getAlphInContract",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends RhoneBussinTypes.MultiCallParams>(
    calls: Calls
  ): Promise<RhoneBussinTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      RhoneBussin,
      this,
      calls,
      getContractByCodeHash
    )) as RhoneBussinTypes.MultiCallResults<Calls>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as AllMovesContractJson } from "../gamefi/moves/AllMoves.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, MoveReturn, PacaFlip, AllStructs } from "./types";

// Custom types for the contract
export namespace AllMovesTypes {
  export type Fields = {
    collectionOwner: Address;
    collectionUri: HexString;
    gameContract: HexString;
    totalSupply: bigint;
    baseuri: HexString;
    playerContractId: HexString;
    code: HexString;
    encodedImmutableFields: HexString;
    encodedMutableFields: HexString;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{
    minter: Address;
    fromIndex: bigint;
    contract: HexString;
  }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; index: bigint }>;
      result: CallContractResult<null>;
    };
    mint: {
      params: CallContractParams<{ tokenSelected: HexString }>;
      result: CallContractResult<null>;
    };
    editCollectionUri: {
      params: CallContractParams<{ newCollectionUri: HexString }>;
      result: CallContractResult<null>;
    };
    updateAllMoves: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updateAllMovesFields: {
      params: CallContractParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    updateMoveCode: {
      params: CallContractParams<{ nft: HexString }>;
      result: CallContractResult<null>;
    };
    updateMoveFields: {
      params: CallContractParams<{ nft: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        index: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{ tokenSelected: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionUri: {
      params: SignExecuteContractMethodParams<{ newCollectionUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateAllMoves: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateAllMovesFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateMoveCode: {
      params: SignExecuteContractMethodParams<{ nft: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateMoveFields: {
      params: SignExecuteContractMethodParams<{ nft: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<AllMovesInstance, AllMovesTypes.Fields> {
  encodeFields(fields: AllMovesTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Mint: 0 };
  consts = {
    ErrorCodes: {
      NFTNotFound: BigInt("0"),
      CollectionOwnerAllowedOnly: BigInt("1"),
      NFTNotPartOfCollection: BigInt("2"),
      NotValidNFT: BigInt("3"),
    },
  };

  at(address: string): AllMovesInstance {
    return new AllMovesInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<AllMovesTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<AllMovesTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { nftId: HexString; index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { tokenSelected: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    editCollectionUri: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { newCollectionUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    updateAllMoves: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { newCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateAllMoves", params, getContractByCodeHash);
    },
    updateAllMovesFields: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateAllMovesFields",
        params,
        getContractByCodeHash
      );
    },
    updateMoveCode: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { nft: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateMoveCode", params, getContractByCodeHash);
    },
    updateMoveFields: async (
      params: TestContractParamsWithoutMaps<
        AllMovesTypes.Fields,
        { nft: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateMoveFields",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: AllMovesTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const AllMoves = new Factory(
  Contract.fromJson(
    AllMovesContractJson,
    "",
    "0e393c995e25c4112f312085cb57522140784f0d088a0276936ee0322735faec",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class AllMovesInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AllMovesTypes.State> {
    return fetchContractState(AllMoves, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: EventSubscribeOptions<AllMovesTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AllMoves.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  view = {
    getCollectionUri: async (
      params?: AllMovesTypes.CallMethodParams<"getCollectionUri">
    ): Promise<AllMovesTypes.CallMethodResult<"getCollectionUri">> => {
      return callMethod(
        AllMoves,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: AllMovesTypes.CallMethodParams<"totalSupply">
    ): Promise<AllMovesTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        AllMoves,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: AllMovesTypes.CallMethodParams<"nftByIndex">
    ): Promise<AllMovesTypes.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        AllMoves,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: AllMovesTypes.CallMethodParams<"validateNFT">
    ): Promise<AllMovesTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        AllMoves,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: AllMovesTypes.CallMethodParams<"mint">
    ): Promise<AllMovesTypes.CallMethodResult<"mint">> => {
      return callMethod(AllMoves, this, "mint", params, getContractByCodeHash);
    },
    editCollectionUri: async (
      params: AllMovesTypes.CallMethodParams<"editCollectionUri">
    ): Promise<AllMovesTypes.CallMethodResult<"editCollectionUri">> => {
      return callMethod(
        AllMoves,
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    updateAllMoves: async (
      params: AllMovesTypes.CallMethodParams<"updateAllMoves">
    ): Promise<AllMovesTypes.CallMethodResult<"updateAllMoves">> => {
      return callMethod(
        AllMoves,
        this,
        "updateAllMoves",
        params,
        getContractByCodeHash
      );
    },
    updateAllMovesFields: async (
      params: AllMovesTypes.CallMethodParams<"updateAllMovesFields">
    ): Promise<AllMovesTypes.CallMethodResult<"updateAllMovesFields">> => {
      return callMethod(
        AllMoves,
        this,
        "updateAllMovesFields",
        params,
        getContractByCodeHash
      );
    },
    updateMoveCode: async (
      params: AllMovesTypes.CallMethodParams<"updateMoveCode">
    ): Promise<AllMovesTypes.CallMethodResult<"updateMoveCode">> => {
      return callMethod(
        AllMoves,
        this,
        "updateMoveCode",
        params,
        getContractByCodeHash
      );
    },
    updateMoveFields: async (
      params: AllMovesTypes.CallMethodParams<"updateMoveFields">
    ): Promise<AllMovesTypes.CallMethodResult<"updateMoveFields">> => {
      return callMethod(
        AllMoves,
        this,
        "updateMoveFields",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCollectionUri: async (
      params: AllMovesTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"getCollectionUri">> => {
      return signExecuteMethod(AllMoves, this, "getCollectionUri", params);
    },
    totalSupply: async (
      params: AllMovesTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"totalSupply">> => {
      return signExecuteMethod(AllMoves, this, "totalSupply", params);
    },
    nftByIndex: async (
      params: AllMovesTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"nftByIndex">> => {
      return signExecuteMethod(AllMoves, this, "nftByIndex", params);
    },
    validateNFT: async (
      params: AllMovesTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"validateNFT">> => {
      return signExecuteMethod(AllMoves, this, "validateNFT", params);
    },
    mint: async (
      params: AllMovesTypes.SignExecuteMethodParams<"mint">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(AllMoves, this, "mint", params);
    },
    editCollectionUri: async (
      params: AllMovesTypes.SignExecuteMethodParams<"editCollectionUri">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"editCollectionUri">> => {
      return signExecuteMethod(AllMoves, this, "editCollectionUri", params);
    },
    updateAllMoves: async (
      params: AllMovesTypes.SignExecuteMethodParams<"updateAllMoves">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"updateAllMoves">> => {
      return signExecuteMethod(AllMoves, this, "updateAllMoves", params);
    },
    updateAllMovesFields: async (
      params: AllMovesTypes.SignExecuteMethodParams<"updateAllMovesFields">
    ): Promise<
      AllMovesTypes.SignExecuteMethodResult<"updateAllMovesFields">
    > => {
      return signExecuteMethod(AllMoves, this, "updateAllMovesFields", params);
    },
    updateMoveCode: async (
      params: AllMovesTypes.SignExecuteMethodParams<"updateMoveCode">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"updateMoveCode">> => {
      return signExecuteMethod(AllMoves, this, "updateMoveCode", params);
    },
    updateMoveFields: async (
      params: AllMovesTypes.SignExecuteMethodParams<"updateMoveFields">
    ): Promise<AllMovesTypes.SignExecuteMethodResult<"updateMoveFields">> => {
      return signExecuteMethod(AllMoves, this, "updateMoveFields", params);
    },
  };

  async multicall<Callss extends AllMovesTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<AllMovesTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      AllMoves,
      this,
      callss,
      getContractByCodeHash
    )) as AllMovesTypes.MulticallReturnType<Callss>;
  }
}

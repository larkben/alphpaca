/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as WorldContractJson } from "../gamefi/world/World.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, PlayerData, AllStructs } from "./types";

// Custom types for the contract
export namespace WorldTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    returnBen: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    returnBen: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<WorldInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  at(address: string): WorldInstance {
    return new WorldInstance(address);
  }

  tests = {
    returnBen: async (
      params?: Omit<
        TestContractParamsWithoutMaps<never, never>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "returnBen",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(initFields: {}, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const World = new Factory(
  Contract.fromJson(
    WorldContractJson,
    "",
    "7c0146d8168124ebf084e8a9b826c9861de3f529abb1fbe5df462c6ad774b617",
    AllStructs
  )
);
registerContract(World);

// Use this class to interact with the blockchain
export class WorldInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<WorldTypes.State> {
    return fetchContractState(World, this);
  }

  view = {
    returnBen: async (
      params?: WorldTypes.CallMethodParams<"returnBen">
    ): Promise<WorldTypes.CallMethodResult<"returnBen">> => {
      return callMethod(
        World,
        this,
        "returnBen",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    returnBen: async (
      params: WorldTypes.SignExecuteMethodParams<"returnBen">
    ): Promise<WorldTypes.SignExecuteMethodResult<"returnBen">> => {
      return signExecuteMethod(World, this, "returnBen", params);
    },
  };

  async multicall<Calls extends WorldTypes.MultiCallParams>(
    calls: Calls
  ): Promise<WorldTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends WorldTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<WorldTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends WorldTypes.MultiCallParams | WorldTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(World, this, callss, getContractByCodeHash);
  }
}

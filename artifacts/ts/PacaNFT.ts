/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PacaNFTContractJson } from "../staking/PacaNFT.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace PacaNFTTypes {
  export type Fields = {
    tokenUri: HexString;
    nftIndex: bigint;
    collectionId: HexString;
    tokenStaked: bigint;
    timeStamp: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    editUri: {
      params: CallContractParams<{ newUri: HexString }>;
      result: CallContractResult<null>;
    };
    editTokenStaked: {
      params: CallContractParams<{ newAmount: bigint }>;
      result: CallContractResult<null>;
    };
    editTimeStamp: {
      params: CallContractParams<{ newTime: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    editUri: {
      params: SignExecuteContractMethodParams<{ newUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editTokenStaked: {
      params: SignExecuteContractMethodParams<{ newAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    editTimeStamp: {
      params: SignExecuteContractMethodParams<{ newTime: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<PacaNFTInstance, PacaNFTTypes.Fields> {
  encodeFields(fields: PacaNFTTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PacaNFTTypes.Fields;
  }

  consts = { ErrorCodes: { MustBeCalledFromCollection: BigInt(0) } };

  at(address: string): PacaNFTInstance {
    return new PacaNFTInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<PacaNFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<PacaNFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    editUri: async (
      params: TestContractParamsWithoutMaps<
        PacaNFTTypes.Fields,
        { newUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editUri", params, getContractByCodeHash);
    },
    editTokenStaked: async (
      params: TestContractParamsWithoutMaps<
        PacaNFTTypes.Fields,
        { newAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editTokenStaked", params, getContractByCodeHash);
    },
    editTimeStamp: async (
      params: TestContractParamsWithoutMaps<
        PacaNFTTypes.Fields,
        { newTime: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editTimeStamp", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const PacaNFT = new Factory(
  Contract.fromJson(
    PacaNFTContractJson,
    "",
    "930328883a0a73b40cdbaae570e5528690b5ca137bcc0e26f380713720dbd812",
    []
  )
);

// Use this class to interact with the blockchain
export class PacaNFTInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PacaNFTTypes.State> {
    return fetchContractState(PacaNFT, this);
  }

  methods = {
    getTokenUri: async (
      params?: PacaNFTTypes.CallMethodParams<"getTokenUri">
    ): Promise<PacaNFTTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        PacaNFT,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: PacaNFTTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<PacaNFTTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        PacaNFT,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    editUri: async (
      params: PacaNFTTypes.CallMethodParams<"editUri">
    ): Promise<PacaNFTTypes.CallMethodResult<"editUri">> => {
      return callMethod(
        PacaNFT,
        this,
        "editUri",
        params,
        getContractByCodeHash
      );
    },
    editTokenStaked: async (
      params: PacaNFTTypes.CallMethodParams<"editTokenStaked">
    ): Promise<PacaNFTTypes.CallMethodResult<"editTokenStaked">> => {
      return callMethod(
        PacaNFT,
        this,
        "editTokenStaked",
        params,
        getContractByCodeHash
      );
    },
    editTimeStamp: async (
      params: PacaNFTTypes.CallMethodParams<"editTimeStamp">
    ): Promise<PacaNFTTypes.CallMethodResult<"editTimeStamp">> => {
      return callMethod(
        PacaNFT,
        this,
        "editTimeStamp",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getTokenUri: async (
      params: PacaNFTTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<PacaNFTTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(PacaNFT, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: PacaNFTTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<PacaNFTTypes.SignExecuteMethodResult<"getCollectionIndex">> => {
      return signExecuteMethod(PacaNFT, this, "getCollectionIndex", params);
    },
    editUri: async (
      params: PacaNFTTypes.SignExecuteMethodParams<"editUri">
    ): Promise<PacaNFTTypes.SignExecuteMethodResult<"editUri">> => {
      return signExecuteMethod(PacaNFT, this, "editUri", params);
    },
    editTokenStaked: async (
      params: PacaNFTTypes.SignExecuteMethodParams<"editTokenStaked">
    ): Promise<PacaNFTTypes.SignExecuteMethodResult<"editTokenStaked">> => {
      return signExecuteMethod(PacaNFT, this, "editTokenStaked", params);
    },
    editTimeStamp: async (
      params: PacaNFTTypes.SignExecuteMethodParams<"editTimeStamp">
    ): Promise<PacaNFTTypes.SignExecuteMethodResult<"editTimeStamp">> => {
      return signExecuteMethod(PacaNFT, this, "editTimeStamp", params);
    },
  };

  async multicall<Calls extends PacaNFTTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PacaNFTTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      PacaNFT,
      this,
      calls,
      getContractByCodeHash
    )) as PacaNFTTypes.MultiCallResults<Calls>;
  }
}

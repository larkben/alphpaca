/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as ItemContractJson } from "../gamefi/helditem/Item.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, MoveReturn, AllStructs } from "./types";

// Custom types for the contract
export namespace ItemTypes {
  export type Fields = {
    nftIndex: bigint;
    tokenUri: HexString;
    collectionId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getNFTIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    editUri: {
      params: CallContractParams<{ newUri: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNFTIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    editUri: {
      params: SignExecuteContractMethodParams<{ newUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<ItemInstance, ItemTypes.Fields> {
  encodeFields(fields: ItemTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = { ErrorCodes: { NotCalledFromCollection: BigInt("0") } };

  at(address: string): ItemInstance {
    return new ItemInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<ItemTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<ItemTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<ItemTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getNFTIndex", params, getContractByCodeHash);
    },
    editUri: async (
      params: TestContractParamsWithoutMaps<
        ItemTypes.Fields,
        { newUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editUri", params, getContractByCodeHash);
    },
  };

  stateForTest(initFields: ItemTypes.Fields, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Item = new Factory(
  Contract.fromJson(
    ItemContractJson,
    "",
    "52477ea85904f714a088d0eb44252f6970eb47c6b4d208b80fb031491f9c5aa6",
    AllStructs
  )
);
registerContract(Item);

// Use this class to interact with the blockchain
export class ItemInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ItemTypes.State> {
    return fetchContractState(Item, this);
  }

  view = {
    getTokenUri: async (
      params?: ItemTypes.CallMethodParams<"getTokenUri">
    ): Promise<ItemTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        Item,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: ItemTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<ItemTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        Item,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params?: ItemTypes.CallMethodParams<"getNFTIndex">
    ): Promise<ItemTypes.CallMethodResult<"getNFTIndex">> => {
      return callMethod(
        Item,
        this,
        "getNFTIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    editUri: async (
      params: ItemTypes.CallMethodParams<"editUri">
    ): Promise<ItemTypes.CallMethodResult<"editUri">> => {
      return callMethod(Item, this, "editUri", params, getContractByCodeHash);
    },
  };

  transact = {
    getTokenUri: async (
      params: ItemTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<ItemTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(Item, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: ItemTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<ItemTypes.SignExecuteMethodResult<"getCollectionIndex">> => {
      return signExecuteMethod(Item, this, "getCollectionIndex", params);
    },
    getNFTIndex: async (
      params: ItemTypes.SignExecuteMethodParams<"getNFTIndex">
    ): Promise<ItemTypes.SignExecuteMethodResult<"getNFTIndex">> => {
      return signExecuteMethod(Item, this, "getNFTIndex", params);
    },
    editUri: async (
      params: ItemTypes.SignExecuteMethodParams<"editUri">
    ): Promise<ItemTypes.SignExecuteMethodResult<"editUri">> => {
      return signExecuteMethod(Item, this, "editUri", params);
    },
  };

  async multicall<Calls extends ItemTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ItemTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends ItemTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<ItemTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends ItemTypes.MultiCallParams | ItemTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Item, this, callss, getContractByCodeHash);
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PlayerBaseContractJson } from "../gamefi/PlayerBase.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, MoveReturn, PacaFlip, AllStructs } from "./types";

// Custom types for the contract
export namespace PlayerBaseTypes {
  export type Fields = {
    collectionOwner: Address;
    collectionUri: HexString;
    gameContract: HexString;
    totalSupply: bigint;
    baseuri: HexString;
    playerContractId: HexString;
    oldcollection: HexString;
    code: HexString;
    encodedImmutableFields: HexString;
    encodedMutableFields: HexString;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{
    minter: Address;
    fromIndex: bigint;
    contract: HexString;
  }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; index: bigint }>;
      result: CallContractResult<null>;
    };
    mint: {
      params: CallContractParams<{ tokenSelected: HexString }>;
      result: CallContractResult<null>;
    };
    updateNickname: {
      params: CallContractParams<{ paca: HexString; newNickName: HexString }>;
      result: CallContractResult<null>;
    };
    updateLinkedAddress: {
      params: CallContractParams<{ paca: HexString; newAddress: Address }>;
      result: CallContractResult<null>;
    };
    assignPacaMove: {
      params: CallContractParams<{
        paca: HexString;
        slot: bigint;
        move: HexString;
      }>;
      result: CallContractResult<null>;
    };
    unlinkMove: {
      params: CallContractParams<{ paca: HexString; slot: bigint }>;
      result: CallContractResult<null>;
    };
    editCollectionUri: {
      params: CallContractParams<{ newCollectionUri: HexString }>;
      result: CallContractResult<null>;
    };
    updatePlayerBase: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updatePlayerBaseFields: {
      params: CallContractParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    updateALPHpacaCode: {
      params: CallContractParams<{ nft: HexString }>;
      result: CallContractResult<null>;
    };
    updateALPHpacaFields: {
      params: CallContractParams<{ nft: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        index: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{ tokenSelected: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateNickname: {
      params: SignExecuteContractMethodParams<{
        paca: HexString;
        newNickName: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateLinkedAddress: {
      params: SignExecuteContractMethodParams<{
        paca: HexString;
        newAddress: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    assignPacaMove: {
      params: SignExecuteContractMethodParams<{
        paca: HexString;
        slot: bigint;
        move: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    unlinkMove: {
      params: SignExecuteContractMethodParams<{
        paca: HexString;
        slot: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    editCollectionUri: {
      params: SignExecuteContractMethodParams<{ newCollectionUri: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updatePlayerBase: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updatePlayerBaseFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateALPHpacaCode: {
      params: SignExecuteContractMethodParams<{ nft: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateALPHpacaFields: {
      params: SignExecuteContractMethodParams<{ nft: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PlayerBaseInstance,
  PlayerBaseTypes.Fields
> {
  encodeFields(fields: PlayerBaseTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Mint: 0 };
  consts = {
    ErrorCodes: {
      NFTNotFound: BigInt("0"),
      CollectionOwnerAllowedOnly: BigInt("1"),
      NFTNotPartOfCollection: BigInt("2"),
      NotValidNFT: BigInt("3"),
      InvalidMoveSlot: BigInt("4"),
    },
  };

  at(address: string): PlayerBaseInstance {
    return new PlayerBaseInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<PlayerBaseTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<PlayerBaseTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { nftId: HexString; index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { tokenSelected: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    updateNickname: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { paca: HexString; newNickName: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateNickname", params, getContractByCodeHash);
    },
    updateLinkedAddress: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { paca: HexString; newAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateLinkedAddress",
        params,
        getContractByCodeHash
      );
    },
    assignPacaMove: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { paca: HexString; slot: bigint; move: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assignPacaMove", params, getContractByCodeHash);
    },
    unlinkMove: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { paca: HexString; slot: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "unlinkMove", params, getContractByCodeHash);
    },
    editCollectionUri: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { newCollectionUri: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    updatePlayerBase: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { newCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updatePlayerBase",
        params,
        getContractByCodeHash
      );
    },
    updatePlayerBaseFields: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updatePlayerBaseFields",
        params,
        getContractByCodeHash
      );
    },
    updateALPHpacaCode: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { nft: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateALPHpacaCode",
        params,
        getContractByCodeHash
      );
    },
    updateALPHpacaFields: async (
      params: TestContractParamsWithoutMaps<
        PlayerBaseTypes.Fields,
        { nft: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateALPHpacaFields",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: PlayerBaseTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PlayerBase = new Factory(
  Contract.fromJson(
    PlayerBaseContractJson,
    "",
    "cdc37bc3cd1f8a1438e7269fb7abaee64a1d246e97768fa43168687fe998de3e",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class PlayerBaseInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PlayerBaseTypes.State> {
    return fetchContractState(PlayerBase, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: EventSubscribeOptions<PlayerBaseTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PlayerBase.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  view = {
    getCollectionUri: async (
      params?: PlayerBaseTypes.CallMethodParams<"getCollectionUri">
    ): Promise<PlayerBaseTypes.CallMethodResult<"getCollectionUri">> => {
      return callMethod(
        PlayerBase,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: PlayerBaseTypes.CallMethodParams<"totalSupply">
    ): Promise<PlayerBaseTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        PlayerBase,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: PlayerBaseTypes.CallMethodParams<"nftByIndex">
    ): Promise<PlayerBaseTypes.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        PlayerBase,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: PlayerBaseTypes.CallMethodParams<"validateNFT">
    ): Promise<PlayerBaseTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        PlayerBase,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: PlayerBaseTypes.CallMethodParams<"mint">
    ): Promise<PlayerBaseTypes.CallMethodResult<"mint">> => {
      return callMethod(
        PlayerBase,
        this,
        "mint",
        params,
        getContractByCodeHash
      );
    },
    updateNickname: async (
      params: PlayerBaseTypes.CallMethodParams<"updateNickname">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updateNickname">> => {
      return callMethod(
        PlayerBase,
        this,
        "updateNickname",
        params,
        getContractByCodeHash
      );
    },
    updateLinkedAddress: async (
      params: PlayerBaseTypes.CallMethodParams<"updateLinkedAddress">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updateLinkedAddress">> => {
      return callMethod(
        PlayerBase,
        this,
        "updateLinkedAddress",
        params,
        getContractByCodeHash
      );
    },
    assignPacaMove: async (
      params: PlayerBaseTypes.CallMethodParams<"assignPacaMove">
    ): Promise<PlayerBaseTypes.CallMethodResult<"assignPacaMove">> => {
      return callMethod(
        PlayerBase,
        this,
        "assignPacaMove",
        params,
        getContractByCodeHash
      );
    },
    unlinkMove: async (
      params: PlayerBaseTypes.CallMethodParams<"unlinkMove">
    ): Promise<PlayerBaseTypes.CallMethodResult<"unlinkMove">> => {
      return callMethod(
        PlayerBase,
        this,
        "unlinkMove",
        params,
        getContractByCodeHash
      );
    },
    editCollectionUri: async (
      params: PlayerBaseTypes.CallMethodParams<"editCollectionUri">
    ): Promise<PlayerBaseTypes.CallMethodResult<"editCollectionUri">> => {
      return callMethod(
        PlayerBase,
        this,
        "editCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    updatePlayerBase: async (
      params: PlayerBaseTypes.CallMethodParams<"updatePlayerBase">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updatePlayerBase">> => {
      return callMethod(
        PlayerBase,
        this,
        "updatePlayerBase",
        params,
        getContractByCodeHash
      );
    },
    updatePlayerBaseFields: async (
      params: PlayerBaseTypes.CallMethodParams<"updatePlayerBaseFields">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updatePlayerBaseFields">> => {
      return callMethod(
        PlayerBase,
        this,
        "updatePlayerBaseFields",
        params,
        getContractByCodeHash
      );
    },
    updateALPHpacaCode: async (
      params: PlayerBaseTypes.CallMethodParams<"updateALPHpacaCode">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updateALPHpacaCode">> => {
      return callMethod(
        PlayerBase,
        this,
        "updateALPHpacaCode",
        params,
        getContractByCodeHash
      );
    },
    updateALPHpacaFields: async (
      params: PlayerBaseTypes.CallMethodParams<"updateALPHpacaFields">
    ): Promise<PlayerBaseTypes.CallMethodResult<"updateALPHpacaFields">> => {
      return callMethod(
        PlayerBase,
        this,
        "updateALPHpacaFields",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCollectionUri: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"getCollectionUri">> => {
      return signExecuteMethod(PlayerBase, this, "getCollectionUri", params);
    },
    totalSupply: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"totalSupply">> => {
      return signExecuteMethod(PlayerBase, this, "totalSupply", params);
    },
    nftByIndex: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"nftByIndex">> => {
      return signExecuteMethod(PlayerBase, this, "nftByIndex", params);
    },
    validateNFT: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"validateNFT">> => {
      return signExecuteMethod(PlayerBase, this, "validateNFT", params);
    },
    mint: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"mint">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(PlayerBase, this, "mint", params);
    },
    updateNickname: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updateNickname">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"updateNickname">> => {
      return signExecuteMethod(PlayerBase, this, "updateNickname", params);
    },
    updateLinkedAddress: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updateLinkedAddress">
    ): Promise<
      PlayerBaseTypes.SignExecuteMethodResult<"updateLinkedAddress">
    > => {
      return signExecuteMethod(PlayerBase, this, "updateLinkedAddress", params);
    },
    assignPacaMove: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"assignPacaMove">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"assignPacaMove">> => {
      return signExecuteMethod(PlayerBase, this, "assignPacaMove", params);
    },
    unlinkMove: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"unlinkMove">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"unlinkMove">> => {
      return signExecuteMethod(PlayerBase, this, "unlinkMove", params);
    },
    editCollectionUri: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"editCollectionUri">
    ): Promise<
      PlayerBaseTypes.SignExecuteMethodResult<"editCollectionUri">
    > => {
      return signExecuteMethod(PlayerBase, this, "editCollectionUri", params);
    },
    updatePlayerBase: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updatePlayerBase">
    ): Promise<PlayerBaseTypes.SignExecuteMethodResult<"updatePlayerBase">> => {
      return signExecuteMethod(PlayerBase, this, "updatePlayerBase", params);
    },
    updatePlayerBaseFields: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updatePlayerBaseFields">
    ): Promise<
      PlayerBaseTypes.SignExecuteMethodResult<"updatePlayerBaseFields">
    > => {
      return signExecuteMethod(
        PlayerBase,
        this,
        "updatePlayerBaseFields",
        params
      );
    },
    updateALPHpacaCode: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updateALPHpacaCode">
    ): Promise<
      PlayerBaseTypes.SignExecuteMethodResult<"updateALPHpacaCode">
    > => {
      return signExecuteMethod(PlayerBase, this, "updateALPHpacaCode", params);
    },
    updateALPHpacaFields: async (
      params: PlayerBaseTypes.SignExecuteMethodParams<"updateALPHpacaFields">
    ): Promise<
      PlayerBaseTypes.SignExecuteMethodResult<"updateALPHpacaFields">
    > => {
      return signExecuteMethod(
        PlayerBase,
        this,
        "updateALPHpacaFields",
        params
      );
    },
  };

  async multicall<Callss extends PlayerBaseTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<PlayerBaseTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      PlayerBase,
      this,
      callss,
      getContractByCodeHash
    )) as PlayerBaseTypes.MulticallReturnType<Callss>;
  }
}

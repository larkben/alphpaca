/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LoanFactoryContractJson } from "../loans/LoanFactory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, PlayerData, AllStructs } from "./types";

// Custom types for the contract
export namespace LoanFactoryTypes {
  export type Fields = {
    admin: Address;
    loanTemplate: HexString;
    activeLoans: bigint;
    rate: bigint;
  };

  export type State = ContractState<Fields>;

  export type NewLoanEvent = ContractEvent<{
    contract: HexString;
    tokenRequested: HexString;
    tokenAmount: bigint;
    collateralToken: HexString;
    collateralAmount: bigint;
    interest: bigint;
    duration: bigint;
    who: Address;
  }>;
  export type AcceptedLoanEvent = ContractEvent<{
    contract: HexString;
    who: Address;
  }>;
  export type LoanRemovedEvent = ContractEvent<{
    contract: HexString;
    who: Address;
  }>;
  export type LoanWithdrawEvent = ContractEvent<{
    contract: HexString;
    forfeit: boolean;
    who: Address;
  }>;

  export interface CallMethodTable {
    getRequiredTokens: {
      params: CallContractParams<{
        contractId: HexString;
        withInterest: boolean;
      }>;
      result: CallContractResult<[HexString, bigint]>;
    };
    createLoan: {
      params: CallContractParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
      }>;
      result: CallContractResult<null>;
    };
    accept: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    cancel: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    pay: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    forfeit: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<null>;
    };
    editRate: {
      params: CallContractParams<{ newRate: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawLoanFactoryFees: {
      params: CallContractParams<{
        who: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    updateLoanFactoryCode: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updateLoanFactoryFields: {
      params: CallContractParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getRequiredTokens: {
      params: SignExecuteContractMethodParams<{
        contractId: HexString;
        withInterest: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createLoan: {
      params: SignExecuteContractMethodParams<{
        tokenRequested: HexString;
        tokenAmount: bigint;
        collateralToken: HexString;
        collateralAmount: bigint;
        interest: bigint;
        duration: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    accept: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    cancel: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    pay: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    forfeit: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editRate: {
      params: SignExecuteContractMethodParams<{ newRate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawLoanFactoryFees: {
      params: SignExecuteContractMethodParams<{
        who: Address;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateLoanFactoryCode: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateLoanFactoryFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LoanFactoryInstance,
  LoanFactoryTypes.Fields
> {
  encodeFields(fields: LoanFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { NewLoan: 0, AcceptedLoan: 1, LoanRemoved: 2, LoanWithdraw: 3 };
  consts = { LoanCodes: { NotAdmin: BigInt("0") } };

  at(address: string): LoanFactoryInstance {
    return new LoanFactoryInstance(address);
  }

  tests = {
    getRequiredTokens: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { contractId: HexString; withInterest: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getRequiredTokens",
        params,
        getContractByCodeHash
      );
    },
    createLoan: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        {
          tokenRequested: HexString;
          tokenAmount: bigint;
          collateralToken: HexString;
          collateralAmount: bigint;
          interest: bigint;
          duration: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createLoan", params, getContractByCodeHash);
    },
    accept: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { contractId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "accept", params, getContractByCodeHash);
    },
    cancel: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { contractId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancel", params, getContractByCodeHash);
    },
    pay: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { contractId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "pay", params, getContractByCodeHash);
    },
    forfeit: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { contractId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "forfeit", params, getContractByCodeHash);
    },
    editRate: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { newRate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editRate", params, getContractByCodeHash);
    },
    withdrawLoanFactoryFees: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { who: Address; token: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "withdrawLoanFactoryFees",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryCode: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { newCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateLoanFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryFields: async (
      params: TestContractParamsWithoutMaps<
        LoanFactoryTypes.Fields,
        { newCode: HexString; immFields: HexString; mutFields: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateLoanFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: LoanFactoryTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const LoanFactory = new Factory(
  Contract.fromJson(
    LoanFactoryContractJson,
    "",
    "64067a353c56ec160269faca72815e575c538e9a46410935b0f24a8b2cfb2048",
    AllStructs
  )
);
registerContract(LoanFactory);

// Use this class to interact with the blockchain
export class LoanFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LoanFactoryTypes.State> {
    return fetchContractState(LoanFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewLoanEvent(
    options: EventSubscribeOptions<LoanFactoryTypes.NewLoanEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactory.contract,
      this,
      options,
      "NewLoan",
      fromCount
    );
  }

  subscribeAcceptedLoanEvent(
    options: EventSubscribeOptions<LoanFactoryTypes.AcceptedLoanEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactory.contract,
      this,
      options,
      "AcceptedLoan",
      fromCount
    );
  }

  subscribeLoanRemovedEvent(
    options: EventSubscribeOptions<LoanFactoryTypes.LoanRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactory.contract,
      this,
      options,
      "LoanRemoved",
      fromCount
    );
  }

  subscribeLoanWithdrawEvent(
    options: EventSubscribeOptions<LoanFactoryTypes.LoanWithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LoanFactory.contract,
      this,
      options,
      "LoanWithdraw",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LoanFactoryTypes.NewLoanEvent
      | LoanFactoryTypes.AcceptedLoanEvent
      | LoanFactoryTypes.LoanRemovedEvent
      | LoanFactoryTypes.LoanWithdrawEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LoanFactory.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getRequiredTokens: async (
      params: LoanFactoryTypes.CallMethodParams<"getRequiredTokens">
    ): Promise<LoanFactoryTypes.CallMethodResult<"getRequiredTokens">> => {
      return callMethod(
        LoanFactory,
        this,
        "getRequiredTokens",
        params,
        getContractByCodeHash
      );
    },
    createLoan: async (
      params: LoanFactoryTypes.CallMethodParams<"createLoan">
    ): Promise<LoanFactoryTypes.CallMethodResult<"createLoan">> => {
      return callMethod(
        LoanFactory,
        this,
        "createLoan",
        params,
        getContractByCodeHash
      );
    },
    accept: async (
      params: LoanFactoryTypes.CallMethodParams<"accept">
    ): Promise<LoanFactoryTypes.CallMethodResult<"accept">> => {
      return callMethod(
        LoanFactory,
        this,
        "accept",
        params,
        getContractByCodeHash
      );
    },
    cancel: async (
      params: LoanFactoryTypes.CallMethodParams<"cancel">
    ): Promise<LoanFactoryTypes.CallMethodResult<"cancel">> => {
      return callMethod(
        LoanFactory,
        this,
        "cancel",
        params,
        getContractByCodeHash
      );
    },
    pay: async (
      params: LoanFactoryTypes.CallMethodParams<"pay">
    ): Promise<LoanFactoryTypes.CallMethodResult<"pay">> => {
      return callMethod(
        LoanFactory,
        this,
        "pay",
        params,
        getContractByCodeHash
      );
    },
    forfeit: async (
      params: LoanFactoryTypes.CallMethodParams<"forfeit">
    ): Promise<LoanFactoryTypes.CallMethodResult<"forfeit">> => {
      return callMethod(
        LoanFactory,
        this,
        "forfeit",
        params,
        getContractByCodeHash
      );
    },
    editRate: async (
      params: LoanFactoryTypes.CallMethodParams<"editRate">
    ): Promise<LoanFactoryTypes.CallMethodResult<"editRate">> => {
      return callMethod(
        LoanFactory,
        this,
        "editRate",
        params,
        getContractByCodeHash
      );
    },
    withdrawLoanFactoryFees: async (
      params: LoanFactoryTypes.CallMethodParams<"withdrawLoanFactoryFees">
    ): Promise<
      LoanFactoryTypes.CallMethodResult<"withdrawLoanFactoryFees">
    > => {
      return callMethod(
        LoanFactory,
        this,
        "withdrawLoanFactoryFees",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryCode: async (
      params: LoanFactoryTypes.CallMethodParams<"updateLoanFactoryCode">
    ): Promise<LoanFactoryTypes.CallMethodResult<"updateLoanFactoryCode">> => {
      return callMethod(
        LoanFactory,
        this,
        "updateLoanFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateLoanFactoryFields: async (
      params: LoanFactoryTypes.CallMethodParams<"updateLoanFactoryFields">
    ): Promise<
      LoanFactoryTypes.CallMethodResult<"updateLoanFactoryFields">
    > => {
      return callMethod(
        LoanFactory,
        this,
        "updateLoanFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getRequiredTokens: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"getRequiredTokens">
    ): Promise<
      LoanFactoryTypes.SignExecuteMethodResult<"getRequiredTokens">
    > => {
      return signExecuteMethod(LoanFactory, this, "getRequiredTokens", params);
    },
    createLoan: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"createLoan">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"createLoan">> => {
      return signExecuteMethod(LoanFactory, this, "createLoan", params);
    },
    accept: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"accept">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"accept">> => {
      return signExecuteMethod(LoanFactory, this, "accept", params);
    },
    cancel: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"cancel">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"cancel">> => {
      return signExecuteMethod(LoanFactory, this, "cancel", params);
    },
    pay: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"pay">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"pay">> => {
      return signExecuteMethod(LoanFactory, this, "pay", params);
    },
    forfeit: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"forfeit">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"forfeit">> => {
      return signExecuteMethod(LoanFactory, this, "forfeit", params);
    },
    editRate: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"editRate">
    ): Promise<LoanFactoryTypes.SignExecuteMethodResult<"editRate">> => {
      return signExecuteMethod(LoanFactory, this, "editRate", params);
    },
    withdrawLoanFactoryFees: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"withdrawLoanFactoryFees">
    ): Promise<
      LoanFactoryTypes.SignExecuteMethodResult<"withdrawLoanFactoryFees">
    > => {
      return signExecuteMethod(
        LoanFactory,
        this,
        "withdrawLoanFactoryFees",
        params
      );
    },
    updateLoanFactoryCode: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"updateLoanFactoryCode">
    ): Promise<
      LoanFactoryTypes.SignExecuteMethodResult<"updateLoanFactoryCode">
    > => {
      return signExecuteMethod(
        LoanFactory,
        this,
        "updateLoanFactoryCode",
        params
      );
    },
    updateLoanFactoryFields: async (
      params: LoanFactoryTypes.SignExecuteMethodParams<"updateLoanFactoryFields">
    ): Promise<
      LoanFactoryTypes.SignExecuteMethodResult<"updateLoanFactoryFields">
    > => {
      return signExecuteMethod(
        LoanFactory,
        this,
        "updateLoanFactoryFields",
        params
      );
    },
  };

  async multicall<Calls extends LoanFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LoanFactoryTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends LoanFactoryTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<LoanFactoryTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | LoanFactoryTypes.MultiCallParams
      | LoanFactoryTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      LoanFactory,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

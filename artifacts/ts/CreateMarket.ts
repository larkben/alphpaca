/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as CreateMarketContractJson } from "../swaps/CreateMarket.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace CreateMarketTypes {
  export type Fields = {
    owner: Address;
    swap: HexString;
    marketcontract: HexString;
    markets: bigint;
    paca: HexString;
    pacafee: bigint;
    alphfee: bigint;
    ownedalph: bigint;
    ownedpaca: bigint;
  };

  export type State = ContractState<Fields>;

  export type FeeChangeEvent = ContractEvent<{
    feetype: bigint;
    newfee: bigint;
  }>;
  export type NewMarketEvent = ContractEvent<{
    type: bigint;
    contract: HexString;
  }>;

  export interface CallMethodTable {
    getPacaFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAlphFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPacaToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    updatePacaAmount: {
      params: CallContractParams<{ newamount: bigint }>;
      result: CallContractResult<bigint>;
    };
    updateAlphAmount: {
      params: CallContractParams<{ newamount: bigint }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  CreateMarketInstance,
  CreateMarketTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as CreateMarketTypes.Fields;
  }

  eventIndex = { FeeChange: 0, NewMarket: 1 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(1) } };

  at(address: string): CreateMarketInstance {
    return new CreateMarketInstance(address);
  }

  tests = {
    getPacaFee: async (
      params: Omit<
        TestContractParams<CreateMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getPacaFee", params);
    },
    getAlphFee: async (
      params: Omit<
        TestContractParams<CreateMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAlphFee", params);
    },
    getPacaToken: async (
      params: Omit<
        TestContractParams<CreateMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPacaToken", params);
    },
    updatePacaAmount: async (
      params: TestContractParams<
        CreateMarketTypes.Fields,
        { newamount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "updatePacaAmount", params);
    },
    updateAlphAmount: async (
      params: TestContractParams<
        CreateMarketTypes.Fields,
        { newamount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "updateAlphAmount", params);
    },
    createmarket: async (
      params: TestContractParams<
        CreateMarketTypes.Fields,
        { tokenOne: HexString; tokenTwo: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createmarket", params);
    },
    feepaca: async (
      params: TestContractParams<CreateMarketTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "feepaca", params);
    },
    feealph: async (
      params: TestContractParams<CreateMarketTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "feealph", params);
    },
    collectfees: async (
      params: Omit<
        TestContractParams<CreateMarketTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "collectfees", params);
    },
  };
}

// Use this object to test and deploy the contract
export const CreateMarket = new Factory(
  Contract.fromJson(
    CreateMarketContractJson,
    "",
    "09782e9e119d4a850549d9af0196ba2843eec00f51d4e9bac522b5336443264d"
  )
);

// Use this class to interact with the blockchain
export class CreateMarketInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<CreateMarketTypes.State> {
    return fetchContractState(CreateMarket, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeFeeChangeEvent(
    options: EventSubscribeOptions<CreateMarketTypes.FeeChangeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      CreateMarket.contract,
      this,
      options,
      "FeeChange",
      fromCount
    );
  }

  subscribeNewMarketEvent(
    options: EventSubscribeOptions<CreateMarketTypes.NewMarketEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      CreateMarket.contract,
      this,
      options,
      "NewMarket",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      CreateMarketTypes.FeeChangeEvent | CreateMarketTypes.NewMarketEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      CreateMarket.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getPacaFee: async (
      params?: CreateMarketTypes.CallMethodParams<"getPacaFee">
    ): Promise<CreateMarketTypes.CallMethodResult<"getPacaFee">> => {
      return callMethod(
        CreateMarket,
        this,
        "getPacaFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAlphFee: async (
      params?: CreateMarketTypes.CallMethodParams<"getAlphFee">
    ): Promise<CreateMarketTypes.CallMethodResult<"getAlphFee">> => {
      return callMethod(
        CreateMarket,
        this,
        "getAlphFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPacaToken: async (
      params?: CreateMarketTypes.CallMethodParams<"getPacaToken">
    ): Promise<CreateMarketTypes.CallMethodResult<"getPacaToken">> => {
      return callMethod(
        CreateMarket,
        this,
        "getPacaToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updatePacaAmount: async (
      params: CreateMarketTypes.CallMethodParams<"updatePacaAmount">
    ): Promise<CreateMarketTypes.CallMethodResult<"updatePacaAmount">> => {
      return callMethod(
        CreateMarket,
        this,
        "updatePacaAmount",
        params,
        getContractByCodeHash
      );
    },
    updateAlphAmount: async (
      params: CreateMarketTypes.CallMethodParams<"updateAlphAmount">
    ): Promise<CreateMarketTypes.CallMethodResult<"updateAlphAmount">> => {
      return callMethod(
        CreateMarket,
        this,
        "updateAlphAmount",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends CreateMarketTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CreateMarketTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      CreateMarket,
      this,
      calls,
      getContractByCodeHash
    )) as CreateMarketTypes.MultiCallResults<Calls>;
  }
}

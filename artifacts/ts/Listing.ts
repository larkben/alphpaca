/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as ListingContractJson } from "../marketplace/Listing.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace ListingTypes {
  export type Fields = {
    owner: Address;
    marketplaceContract: Address;
    assetListed: HexString;
    assetAmount: bigint;
    price: bigint;
    priceToken: HexString;
    listedTime: bigint;
    expiration: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAssetListed: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getPriceToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getAssetAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getMarketplaceAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getListedTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<ListingInstance, ListingTypes.Fields> {
  encodeFields(fields: ListingTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as ListingTypes.Fields;
  }

  consts = {
    ErrorCodes: { NotCalledFromDapp: BigInt(2), InvalidCaller: BigInt(3) },
  };

  at(address: string): ListingInstance {
    return new ListingInstance(address);
  }

  tests = {
    getAssetListed: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getAssetListed", params);
    },
    getPriceToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getPriceToken", params);
    },
    getAssetAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAssetAmount", params);
    },
    getPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPrice", params);
    },
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getMarketplaceAddress: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getMarketplaceAddress", params);
    },
    getListedTime: async (
      params: Omit<
        TestContractParamsWithoutMaps<ListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getListedTime", params);
    },
    edit: async (
      params: TestContractParamsWithoutMaps<
        ListingTypes.Fields,
        { caller: Address; newprice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "edit", params);
    },
    cancel: async (
      params: TestContractParamsWithoutMaps<
        ListingTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancel", params);
    },
    buy: async (
      params: TestContractParamsWithoutMaps<
        ListingTypes.Fields,
        { buyer: Address; priceAfterFee: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "buy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Listing = new Factory(
  Contract.fromJson(
    ListingContractJson,
    "",
    "471fe65832ce340e8e768ca6c683230139c0a82d14687bc6a8d8647160dffc70",
    []
  )
);

// Use this class to interact with the blockchain
export class ListingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ListingTypes.State> {
    return fetchContractState(Listing, this);
  }

  methods = {
    getAssetListed: async (
      params?: ListingTypes.CallMethodParams<"getAssetListed">
    ): Promise<ListingTypes.CallMethodResult<"getAssetListed">> => {
      return callMethod(
        Listing,
        this,
        "getAssetListed",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPriceToken: async (
      params?: ListingTypes.CallMethodParams<"getPriceToken">
    ): Promise<ListingTypes.CallMethodResult<"getPriceToken">> => {
      return callMethod(
        Listing,
        this,
        "getPriceToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAssetAmount: async (
      params?: ListingTypes.CallMethodParams<"getAssetAmount">
    ): Promise<ListingTypes.CallMethodResult<"getAssetAmount">> => {
      return callMethod(
        Listing,
        this,
        "getAssetAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPrice: async (
      params?: ListingTypes.CallMethodParams<"getPrice">
    ): Promise<ListingTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        Listing,
        this,
        "getPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: ListingTypes.CallMethodParams<"getOwner">
    ): Promise<ListingTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Listing,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMarketplaceAddress: async (
      params?: ListingTypes.CallMethodParams<"getMarketplaceAddress">
    ): Promise<ListingTypes.CallMethodResult<"getMarketplaceAddress">> => {
      return callMethod(
        Listing,
        this,
        "getMarketplaceAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getListedTime: async (
      params?: ListingTypes.CallMethodParams<"getListedTime">
    ): Promise<ListingTypes.CallMethodResult<"getListedTime">> => {
      return callMethod(
        Listing,
        this,
        "getListedTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends ListingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ListingTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Listing,
      this,
      calls,
      getContractByCodeHash
    )) as ListingTypes.MultiCallResults<Calls>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as ZeroKnowledgeProofContractContractJson } from "../zkp/ZeroKnowledgeProofContract.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, MoveReturn, P, AllStructs } from "./types";

// Custom types for the contract
export namespace ZeroKnowledgeProofContractTypes {
  export type Fields = {
    curveP: bigint;
    curveN: bigint;
    curveGX: bigint;
    curveGY: bigint;
    oracle: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    toByteVecFromBits: {
      params: CallContractParams<{ n: bigint }>;
      result: CallContractResult<HexString>;
    };
    getBit: {
      params: CallContractParams<{ bytes: HexString; index: bigint }>;
      result: CallContractResult<boolean>;
    };
    hash: {
      params: CallContractParams<{ x: HexString }>;
      result: CallContractResult<HexString>;
    };
    commit: {
      params: CallContractParams<{ x: bigint; r: bigint }>;
      result: CallContractResult<HexString>;
    };
    commitP: {
      params: CallContractParams<{ p: P }>;
      result: CallContractResult<HexString>;
    };
    modPow: {
      params: CallContractParams<{
        base: bigint;
        exponent: bigint;
        modulus: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    inv: {
      params: CallContractParams<{ a: bigint; p: bigint }>;
      result: CallContractResult<bigint>;
    };
    ecAdd: {
      params: CallContractParams<{ p1: P; p2: P }>;
      result: CallContractResult<P>;
    };
    ecDouble: {
      params: CallContractParams<{ p: P }>;
      result: CallContractResult<P>;
    };
    ecMul: {
      params: CallContractParams<{ p: P; n: bigint }>;
      result: CallContractResult<P>;
    };
    pseudoRandom: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    prove: {
      params: CallContractParams<{ x: bigint; r: bigint }>;
      result: CallContractResult<[HexString, HexString]>;
    };
    verify: {
      params: CallContractParams<{ c: HexString; cxrproof: HexString }>;
      result: CallContractResult<boolean>;
    };
    proveAlph: {
      params: CallContractParams<{ x: bigint; r: bigint }>;
      result: CallContractResult<[HexString, HexString]>;
    };
    verifyAlph: {
      params: CallContractParams<{ c: HexString; cxr: HexString }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    toByteVecFromBits: {
      params: SignExecuteContractMethodParams<{ n: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getBit: {
      params: SignExecuteContractMethodParams<{
        bytes: HexString;
        index: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    hash: {
      params: SignExecuteContractMethodParams<{ x: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    commit: {
      params: SignExecuteContractMethodParams<{ x: bigint; r: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    commitP: {
      params: SignExecuteContractMethodParams<{ p: P }>;
      result: SignExecuteScriptTxResult;
    };
    modPow: {
      params: SignExecuteContractMethodParams<{
        base: bigint;
        exponent: bigint;
        modulus: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    inv: {
      params: SignExecuteContractMethodParams<{ a: bigint; p: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    ecAdd: {
      params: SignExecuteContractMethodParams<{ p1: P; p2: P }>;
      result: SignExecuteScriptTxResult;
    };
    ecDouble: {
      params: SignExecuteContractMethodParams<{ p: P }>;
      result: SignExecuteScriptTxResult;
    };
    ecMul: {
      params: SignExecuteContractMethodParams<{ p: P; n: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    pseudoRandom: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    prove: {
      params: SignExecuteContractMethodParams<{ x: bigint; r: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    verify: {
      params: SignExecuteContractMethodParams<{
        c: HexString;
        cxrproof: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    proveAlph: {
      params: SignExecuteContractMethodParams<{ x: bigint; r: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    verifyAlph: {
      params: SignExecuteContractMethodParams<{ c: HexString; cxr: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  ZeroKnowledgeProofContractInstance,
  ZeroKnowledgeProofContractTypes.Fields
> {
  encodeFields(fields: ZeroKnowledgeProofContractTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): ZeroKnowledgeProofContractInstance {
    return new ZeroKnowledgeProofContractInstance(address);
  }

  tests = {
    toByteVecFromBits: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { n: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "toByteVecFromBits",
        params,
        getContractByCodeHash
      );
    },
    getBit: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { bytes: HexString; index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "getBit", params, getContractByCodeHash);
    },
    hash: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { x: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "hash", params, getContractByCodeHash);
    },
    commit: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { x: bigint; r: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "commit", params, getContractByCodeHash);
    },
    commitP: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { p: P }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "commitP", params, getContractByCodeHash);
    },
    modPow: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { base: bigint; exponent: bigint; modulus: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "modPow", params, getContractByCodeHash);
    },
    inv: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { a: bigint; p: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "inv", params, getContractByCodeHash);
    },
    ecAdd: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { p1: P; p2: P }
      >
    ): Promise<TestContractResultWithoutMaps<P>> => {
      return testMethod(this, "ecAdd", params, getContractByCodeHash);
    },
    ecDouble: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { p: P }
      >
    ): Promise<TestContractResultWithoutMaps<P>> => {
      return testMethod(this, "ecDouble", params, getContractByCodeHash);
    },
    ecMul: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { p: P; n: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<P>> => {
      return testMethod(this, "ecMul", params, getContractByCodeHash);
    },
    pseudoRandom: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          ZeroKnowledgeProofContractTypes.Fields,
          never
        >,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "pseudoRandom", params, getContractByCodeHash);
    },
    prove: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { x: bigint; r: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, HexString]>> => {
      return testMethod(this, "prove", params, getContractByCodeHash);
    },
    verify: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { c: HexString; cxrproof: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "verify", params, getContractByCodeHash);
    },
    proveAlph: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { x: bigint; r: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, HexString]>> => {
      return testMethod(this, "proveAlph", params, getContractByCodeHash);
    },
    verifyAlph: async (
      params: TestContractParamsWithoutMaps<
        ZeroKnowledgeProofContractTypes.Fields,
        { c: HexString; cxr: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "verifyAlph", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: ZeroKnowledgeProofContractTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const ZeroKnowledgeProofContract = new Factory(
  Contract.fromJson(
    ZeroKnowledgeProofContractContractJson,
    "",
    "427c746070172d525a8e14318aa86a829886d0a8bd009ebae3d288d8325d5238",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class ZeroKnowledgeProofContractInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ZeroKnowledgeProofContractTypes.State> {
    return fetchContractState(ZeroKnowledgeProofContract, this);
  }

  view = {
    toByteVecFromBits: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"toByteVecFromBits">
    ): Promise<
      ZeroKnowledgeProofContractTypes.CallMethodResult<"toByteVecFromBits">
    > => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "toByteVecFromBits",
        params,
        getContractByCodeHash
      );
    },
    getBit: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"getBit">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"getBit">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "getBit",
        params,
        getContractByCodeHash
      );
    },
    hash: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"hash">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"hash">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "hash",
        params,
        getContractByCodeHash
      );
    },
    commit: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"commit">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"commit">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "commit",
        params,
        getContractByCodeHash
      );
    },
    commitP: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"commitP">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"commitP">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "commitP",
        params,
        getContractByCodeHash
      );
    },
    modPow: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"modPow">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"modPow">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "modPow",
        params,
        getContractByCodeHash
      );
    },
    inv: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"inv">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"inv">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "inv",
        params,
        getContractByCodeHash
      );
    },
    ecAdd: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"ecAdd">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"ecAdd">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecAdd",
        params,
        getContractByCodeHash
      );
    },
    ecDouble: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"ecDouble">
    ): Promise<
      ZeroKnowledgeProofContractTypes.CallMethodResult<"ecDouble">
    > => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecDouble",
        params,
        getContractByCodeHash
      );
    },
    ecMul: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"ecMul">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"ecMul">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecMul",
        params,
        getContractByCodeHash
      );
    },
    pseudoRandom: async (
      params?: ZeroKnowledgeProofContractTypes.CallMethodParams<"pseudoRandom">
    ): Promise<
      ZeroKnowledgeProofContractTypes.CallMethodResult<"pseudoRandom">
    > => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "pseudoRandom",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    prove: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"prove">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"prove">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "prove",
        params,
        getContractByCodeHash
      );
    },
    verify: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"verify">
    ): Promise<ZeroKnowledgeProofContractTypes.CallMethodResult<"verify">> => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "verify",
        params,
        getContractByCodeHash
      );
    },
    proveAlph: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"proveAlph">
    ): Promise<
      ZeroKnowledgeProofContractTypes.CallMethodResult<"proveAlph">
    > => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "proveAlph",
        params,
        getContractByCodeHash
      );
    },
    verifyAlph: async (
      params: ZeroKnowledgeProofContractTypes.CallMethodParams<"verifyAlph">
    ): Promise<
      ZeroKnowledgeProofContractTypes.CallMethodResult<"verifyAlph">
    > => {
      return callMethod(
        ZeroKnowledgeProofContract,
        this,
        "verifyAlph",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    toByteVecFromBits: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"toByteVecFromBits">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"toByteVecFromBits">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "toByteVecFromBits",
        params
      );
    },
    getBit: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"getBit">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"getBit">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "getBit",
        params
      );
    },
    hash: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"hash">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"hash">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "hash",
        params
      );
    },
    commit: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"commit">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"commit">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "commit",
        params
      );
    },
    commitP: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"commitP">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"commitP">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "commitP",
        params
      );
    },
    modPow: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"modPow">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"modPow">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "modPow",
        params
      );
    },
    inv: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"inv">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"inv">
    > => {
      return signExecuteMethod(ZeroKnowledgeProofContract, this, "inv", params);
    },
    ecAdd: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"ecAdd">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"ecAdd">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecAdd",
        params
      );
    },
    ecDouble: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"ecDouble">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"ecDouble">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecDouble",
        params
      );
    },
    ecMul: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"ecMul">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"ecMul">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "ecMul",
        params
      );
    },
    pseudoRandom: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"pseudoRandom">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"pseudoRandom">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "pseudoRandom",
        params
      );
    },
    prove: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"prove">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"prove">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "prove",
        params
      );
    },
    verify: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"verify">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"verify">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "verify",
        params
      );
    },
    proveAlph: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"proveAlph">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"proveAlph">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "proveAlph",
        params
      );
    },
    verifyAlph: async (
      params: ZeroKnowledgeProofContractTypes.SignExecuteMethodParams<"verifyAlph">
    ): Promise<
      ZeroKnowledgeProofContractTypes.SignExecuteMethodResult<"verifyAlph">
    > => {
      return signExecuteMethod(
        ZeroKnowledgeProofContract,
        this,
        "verifyAlph",
        params
      );
    },
  };

  async multicall<
    Calls extends ZeroKnowledgeProofContractTypes.MultiCallParams
  >(
    calls: Calls
  ): Promise<ZeroKnowledgeProofContractTypes.MultiCallResults<Calls>>;
  async multicall<
    Callss extends ZeroKnowledgeProofContractTypes.MultiCallParams[]
  >(
    callss: Narrow<Callss>
  ): Promise<ZeroKnowledgeProofContractTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | ZeroKnowledgeProofContractTypes.MultiCallParams
      | ZeroKnowledgeProofContractTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      ZeroKnowledgeProofContract,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
